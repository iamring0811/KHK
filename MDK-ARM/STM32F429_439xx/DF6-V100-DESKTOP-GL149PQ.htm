<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\STM32F429_439xx\DF6-V100.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\STM32F429_439xx\DF6-V100.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Mon Oct 19 15:01:01 2020
<BR><P>
<H3>Maximum Stack Usage =       1668 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; tch_read &rArr; key_decode &rArr; tch_maintanence &rArr; fnb_update &rArr; ExploreUSB &rArr; ReadFileFromUSB &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[50]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">ADC_IRQHandler</a><BR>
 <LI><a href="#[1f3]">delete_memory_all</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f5]">tch_read</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[50]">ADC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[38]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[52]">CAN1_RX0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[53]">CAN1_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[54]">CAN1_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[51]">CAN1_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7e]">CAN2_RX0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7f]">CAN2_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[80]">CAN2_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7d]">CAN2_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8d]">CRYP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8c]">DCMI_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[49]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4a]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4b]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4c]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4d]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4e]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4f]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6d]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[76]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[77]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[78]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[79]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7a]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[82]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[83]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[84]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3b]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7b]">ETH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7c]">ETH_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[44]">EXTI0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[66]">EXTI15_10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[45]">EXTI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[46]">EXTI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[47]">EXTI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[48]">EXTI4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[55]">EXTI9_5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[42]">FLASH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8f]">FPU_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6e]">FSMC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8e]">HASH_RNG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[36]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5e]">I2C1_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5d]">I2C1_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[60]">I2C2_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5f]">I2C2_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[87]">I2C3_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[86]">I2C3_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2d]">KEYBRD_Decode</a> from usbh_hid_keybd.o(i.KEYBRD_Decode) referenced 2 times from usbh_hid_keybd.o(.data)
 <LI><a href="#[2c]">KEYBRD_Init</a> from usbh_hid_keybd.o(i.KEYBRD_Init) referenced 2 times from usbh_hid_keybd.o(.data)
 <LI><a href="#[2f]">MOUSE_Decode</a> from usbh_hid_mouse.o(i.MOUSE_Decode) referenced 2 times from usbh_hid_mouse.o(.data)
 <LI><a href="#[2e]">MOUSE_Init</a> from usbh_hid_mouse.o(i.MOUSE_Init) referenced 2 times from usbh_hid_mouse.o(.data)
 <LI><a href="#[37]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[35]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[81]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[68]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[89]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[88]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8b]">OTG_HS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_HS_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8a]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3f]">PVD_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3c]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[43]">RCC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[67]">RTC_Alarm_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[41]">RTC_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[34]">Reset_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6f]">SDIO_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[61]">SPI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[62]">SPI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[71]">SPI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3a]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3d]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[91]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[40]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[56]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[59]">TIM1_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[58]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[57]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5a]">TIM2_IRQHandler</a> from usart.o(i.TIM2_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5b]">TIM3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5c]">TIM4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[70]">TIM5_IRQHandler</a> from stm32f4xx_it.o(i.TIM5_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[74]">TIM6_DAC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[75]">TIM7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[69]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6c]">TIM8_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6b]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6a]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[72]">UART4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[73]">UART5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[63]">USART1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[64]">USART2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[65]">USART3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[85]">USART6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[24]">USBH_Connected</a> from usbh_core.o(i.USBH_Connected) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[25]">USBH_Disconnected</a> from usbh_core.o(i.USBH_Disconnected) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[2a]">USBH_HID_ClassRequest</a> from usbh_hid_core.o(i.USBH_HID_ClassRequest) referenced 2 times from usbh_hid_core.o(.data)
 <LI><a href="#[2b]">USBH_HID_Handle</a> from usbh_hid_core.o(i.USBH_HID_Handle) referenced 2 times from usbh_hid_core.o(.data)
 <LI><a href="#[29]">USBH_HID_InterfaceDeInit</a> from usbh_hid_core.o(i.USBH_HID_InterfaceDeInit) referenced 2 times from usbh_hid_core.o(.data)
 <LI><a href="#[28]">USBH_HID_InterfaceInit</a> from usbh_hid_core.o(i.USBH_HID_InterfaceInit) referenced 2 times from usbh_hid_core.o(.data)
 <LI><a href="#[9]">USBH_HID_USR_Configuration_DescAvailable</a> from usbh_hid_usr.o(i.USBH_HID_USR_Configuration_DescAvailable) referenced 2 times from usbh_hid_usr.o(.data)
 <LI><a href="#[1]">USBH_HID_USR_DeInit</a> from usbh_hid_usr.o(i.USBH_HID_USR_DeInit) referenced 2 times from usbh_hid_usr.o(.data)
 <LI><a href="#[8]">USBH_HID_USR_DeviceAddressAssigned</a> from usbh_hid_usr.o(i.USBH_HID_USR_DeviceAddressAssigned) referenced 2 times from usbh_hid_usr.o(.data)
 <LI><a href="#[2]">USBH_HID_USR_DeviceAttached</a> from usbh_hid_usr.o(i.USBH_HID_USR_DeviceAttached) referenced 2 times from usbh_hid_usr.o(.data)
 <LI><a href="#[4]">USBH_HID_USR_DeviceDisconnected</a> from usbh_hid_usr.o(i.USBH_HID_USR_DeviceDisconnected) referenced 2 times from usbh_hid_usr.o(.data)
 <LI><a href="#[f]">USBH_HID_USR_DeviceNotSupported</a> from usbh_hid_usr.o(i.USBH_HID_USR_DeviceNotSupported) referenced 2 times from usbh_hid_usr.o(.data)
 <LI><a href="#[6]">USBH_HID_USR_DeviceSpeedDetected</a> from usbh_hid_usr.o(i.USBH_HID_USR_DeviceSpeedDetected) referenced 2 times from usbh_hid_usr.o(.data)
 <LI><a href="#[7]">USBH_HID_USR_Device_DescAvailable</a> from usbh_hid_usr.o(i.USBH_HID_USR_Device_DescAvailable) referenced 2 times from usbh_hid_usr.o(.data)
 <LI><a href="#[d]">USBH_HID_USR_EnumerationDone</a> from usbh_hid_usr.o(i.USBH_HID_USR_EnumerationDone) referenced 2 times from usbh_hid_usr.o(.data)
 <LI><a href="#[0]">USBH_HID_USR_Init</a> from usbh_hid_usr.o(i.USBH_HID_USR_Init) referenced 2 times from usbh_hid_usr.o(.data)
 <LI><a href="#[a]">USBH_HID_USR_Manufacturer_String</a> from usbh_hid_usr.o(i.USBH_HID_USR_Manufacturer_String) referenced 2 times from usbh_hid_usr.o(.data)
 <LI><a href="#[5]">USBH_HID_USR_OverCurrentDetected</a> from usbh_hid_usr.o(i.USBH_HID_USR_OverCurrentDetected) referenced 2 times from usbh_hid_usr.o(.data)
 <LI><a href="#[b]">USBH_HID_USR_Product_String</a> from usbh_hid_usr.o(i.USBH_HID_USR_Product_String) referenced 2 times from usbh_hid_usr.o(.data)
 <LI><a href="#[3]">USBH_HID_USR_ResetDevice</a> from usbh_hid_usr.o(i.USBH_HID_USR_ResetDevice) referenced 2 times from usbh_hid_usr.o(.data)
 <LI><a href="#[c]">USBH_HID_USR_SerialNum_String</a> from usbh_hid_usr.o(i.USBH_HID_USR_SerialNum_String) referenced 2 times from usbh_hid_usr.o(.data)
 <LI><a href="#[10]">USBH_HID_USR_UnrecoveredError</a> from usbh_hid_usr.o(i.USBH_HID_USR_UnrecoveredError) referenced 2 times from usbh_hid_usr.o(.data)
 <LI><a href="#[e]">USBH_HID_USR_UserInput</a> from usbh_hid_usr.o(i.USBH_HID_USR_UserInput) referenced 2 times from usbh_hid_usr.o(.data)
 <LI><a href="#[32]">USBH_MSC_ClassRequest</a> from usbh_msc_core.o(i.USBH_MSC_ClassRequest) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[33]">USBH_MSC_Handle</a> from usbh_msc_core.o(i.USBH_MSC_Handle) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[31]">USBH_MSC_InterfaceDeInit</a> from usbh_msc_core.o(i.USBH_MSC_InterfaceDeInit) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[30]">USBH_MSC_InterfaceInit</a> from usbh_msc_core.o(i.USBH_MSC_InterfaceInit) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[27]">USBH_PortDisabled</a> from usbh_core.o(i.USBH_PortDisabled) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[26]">USBH_PortEnabled</a> from usbh_core.o(i.USBH_PortEnabled) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[23]">USBH_SOF</a> from usbh_core.o(i.USBH_SOF) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[1a]">USBH_USR_Configuration_DescAvailable</a> from usbh_msc_usr.o(i.USBH_USR_Configuration_DescAvailable) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[12]">USBH_USR_DeInit</a> from usbh_msc_usr.o(i.USBH_USR_DeInit) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[19]">USBH_USR_DeviceAddressAssigned</a> from usbh_msc_usr.o(i.USBH_USR_DeviceAddressAssigned) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[13]">USBH_USR_DeviceAttached</a> from usbh_msc_usr.o(i.USBH_USR_DeviceAttached) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[15]">USBH_USR_DeviceDisconnected</a> from usbh_msc_usr.o(i.USBH_USR_DeviceDisconnected) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[21]">USBH_USR_DeviceNotSupported</a> from usbh_msc_usr.o(i.USBH_USR_DeviceNotSupported) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[17]">USBH_USR_DeviceSpeedDetected</a> from usbh_msc_usr.o(i.USBH_USR_DeviceSpeedDetected) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[18]">USBH_USR_Device_DescAvailable</a> from usbh_msc_usr.o(i.USBH_USR_Device_DescAvailable) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[1e]">USBH_USR_EnumerationDone</a> from usbh_msc_usr.o(i.USBH_USR_EnumerationDone) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[11]">USBH_USR_Init</a> from usbh_msc_usr.o(i.USBH_USR_Init) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[20]">USBH_USR_MSC_Application</a> from usbh_msc_usr.o(i.USBH_USR_MSC_Application) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[1b]">USBH_USR_Manufacturer_String</a> from usbh_msc_usr.o(i.USBH_USR_Manufacturer_String) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[16]">USBH_USR_OverCurrentDetected</a> from usbh_msc_usr.o(i.USBH_USR_OverCurrentDetected) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[1c]">USBH_USR_Product_String</a> from usbh_msc_usr.o(i.USBH_USR_Product_String) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[14]">USBH_USR_ResetDevice</a> from usbh_msc_usr.o(i.USBH_USR_ResetDevice) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[1d]">USBH_USR_SerialNum_String</a> from usbh_msc_usr.o(i.USBH_USR_SerialNum_String) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[22]">USBH_USR_UnrecoveredError</a> from usbh_msc_usr.o(i.USBH_USR_UnrecoveredError) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[1f]">USBH_USR_UserInput</a> from usbh_msc_usr.o(i.USBH_USR_UserInput) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[39]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3e]">WWDG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[92]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[93]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[93]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[90]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[92]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(.text)
</UL>
<P><STRONG><a name="[2f5]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[94]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a2]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2f6]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2f7]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2f8]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2f9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2fa]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[34]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correction_curve
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b3]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareUSB
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreUSB
</UL>

<P><STRONG><a name="[f6]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_result
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_turbi
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_color
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send720
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_print_time
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result
</UL>

<P><STRONG><a name="[2fb]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[2fc]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[2fd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2fe]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[95]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2ff]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[300]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9b]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[301]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>__decompress2</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>ADC_CommonInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_InitADC
</UL>

<P><STRONG><a name="[113]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_InitADC
</UL>

<P><STRONG><a name="[180]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_loop
</UL>

<P><STRONG><a name="[38]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>DSW_Init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, 32f429_port.o(i.DSW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DSW_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
</UL>

<P><STRONG><a name="[ad]"></a>DSW_Read</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, 32f429_port.o(i.DSW_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DSW_Read &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
</UL>

<P><STRONG><a name="[3b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2c3]"></a>Delay1302</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, resm.o(i.Delay1302))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRTC
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_clk02
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendRTC
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRTC
</UL>

<P><STRONG><a name="[af]"></a>ExploreUSB</STRONG> (Thumb, 388 bytes, Stack size 640 bytes, usb_file.o(i.ExploreUSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 1620<LI>Call Chain = ExploreUSB &rArr; ReadFileFromUSB &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg24
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_bmp_usb
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileFromUSB
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnb_update
</UL>

<P><STRONG><a name="[2f3]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_intflash
</UL>

<P><STRONG><a name="[b7]"></a>FLASH_EraseSector</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f4xx_flash.o(i.FLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Erase
</UL>

<P><STRONG><a name="[bb]"></a>FLASH_GetStatus</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[b9]"></a>FLASH_If_Erase</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f4xx_flash.o(i.FLASH_If_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_If_Erase &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_intflash
</UL>

<P><STRONG><a name="[2f4]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_intflash
</UL>

<P><STRONG><a name="[ba]"></a>FLASH_ProgramWord</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_intflash
</UL>

<P><STRONG><a name="[2f2]"></a>FLASH_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_intflash
</UL>

<P><STRONG><a name="[b8]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[ca]"></a>FMC_NANDCmd</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f4xx_fmc.o(i.FMC_NANDCmd))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Init
</UL>

<P><STRONG><a name="[bd]"></a>FMC_NANDDeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_fmc.o(i.FMC_NANDDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Check
</UL>

<P><STRONG><a name="[c9]"></a>FMC_NANDInit</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, stm32f4xx_fmc.o(i.FMC_NANDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_NANDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Init
</UL>

<P><STRONG><a name="[cb]"></a>FMC_NAND_AddressIncrement</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, fsmc_nand.o(i.FMC_NAND_AddressIncrement))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WriteSpareArea
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WriteSmallPage
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadSpareArea
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadSmallPage
</UL>

<P><STRONG><a name="[bc]"></a>FMC_NAND_Check</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, flash.o(i.FMC_NAND_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = FMC_NAND_Check &rArr; run_format &rArr; readAllRTC &rArr; readRTC &rArr; sendRTC &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadSpareArea
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadSmallPage
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadID
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NANDDeInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_format
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
</UL>

<P><STRONG><a name="[c3]"></a>FMC_NAND_EraseBlock</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, fsmc_nand.o(i.FMC_NAND_EraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_NAND_EraseBlock &rArr; FMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bmp
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_format
</UL>

<P><STRONG><a name="[c4]"></a>FMC_NAND_GetStatus</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, fsmc_nand.o(i.FMC_NAND_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WriteSpareArea
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WriteSmallPage
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadSpareArea
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadSmallPage
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_EraseBlock
</UL>

<P><STRONG><a name="[be]"></a>FMC_NAND_Init</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, fsmc_nand.o(i.FMC_NAND_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = FMC_NAND_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NANDInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NANDCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Check
</UL>

<P><STRONG><a name="[bf]"></a>FMC_NAND_ReadID</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsmc_nand.o(i.FMC_NAND_ReadID))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Check
</UL>

<P><STRONG><a name="[c1]"></a>FMC_NAND_ReadSmallPage</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, fsmc_nand.o(i.FMC_NAND_ReadSmallPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FMC_NAND_ReadSmallPage &rArr; FMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_GetStatus
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_AddressIncrement
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_FONT
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_BMP_second
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_BMP
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Check
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bmp
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_format
</UL>

<P><STRONG><a name="[c0]"></a>FMC_NAND_ReadSpareArea</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, fsmc_nand.o(i.FMC_NAND_ReadSpareArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FMC_NAND_ReadSpareArea &rArr; FMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_GetStatus
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_AddressIncrement
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Check
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_format
</UL>

<P><STRONG><a name="[c5]"></a>FMC_NAND_ReadStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsmc_nand.o(i.FMC_NAND_ReadStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_GetStatus
</UL>

<P><STRONG><a name="[cc]"></a>FMC_NAND_WriteSmallPage</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, fsmc_nand.o(i.FMC_NAND_WriteSmallPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FMC_NAND_WriteSmallPage &rArr; FMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_GetStatus
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_AddressIncrement
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bmp
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_format
</UL>

<P><STRONG><a name="[ce]"></a>FMC_NAND_WriteSpareArea</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, fsmc_nand.o(i.FMC_NAND_WriteSpareArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FMC_NAND_WriteSpareArea &rArr; FMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_GetStatus
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_AddressIncrement
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_format
</UL>

<P><STRONG><a name="[cf]"></a>FirmwareUSB</STRONG> (Thumb, 204 bytes, Stack size 616 bytes, usb_file.o(i.FirmwareUSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 1596<LI>Call Chain = FirmwareUSB &rArr; ReadFileFromUSB &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileFromUSB
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_update
</UL>

<P><STRONG><a name="[ac]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM4_LEDS_port
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSW_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM4_LEDS_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
</UL>

<P><STRONG><a name="[c8]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM4_LEDS_port
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM4_LEDS_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[cd]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WriteSpareArea
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WriteSmallPage
</UL>

<P><STRONG><a name="[164]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
</UL>

<P><STRONG><a name="[162]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
</UL>

<P><STRONG><a name="[130]"></a>HCD_GetCurrentFrame</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetCurrentFrame))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[157]"></a>HCD_GetCurrentSpeed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb_hcd.o(i.HCD_GetCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCD_GetCurrentSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[131]"></a>HCD_GetURB_State</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetURB_State))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[13c]"></a>HCD_GetXferCnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetXferCnt))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
</UL>

<P><STRONG><a name="[d0]"></a>HCD_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usb_hcd.o(i.HCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SelectCore
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[ea]"></a>HCD_IsDeviceConnected</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_IsDeviceConnected))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FS_Process
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HS_Process
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write10
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read10
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_TestUnitReady
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RequestSense
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ReadCapacity10
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ModeSense6
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileFromUSB
</UL>

<P><STRONG><a name="[156]"></a>HCD_IsPortEnabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_IsPortEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[d7]"></a>HCD_ResetPort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_hcd.o(i.HCD_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HCD_ResetPort &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[d9]"></a>HCD_SubmitRequest</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_hcd.o(i.HCD_SubmitRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptReceiveData
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
</UL>

<P><STRONG><a name="[36]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2db]"></a>IncreseSampleID</STRONG> (Thumb, 482 bytes, Stack size 16 bytes, meas.o(i.IncreseSampleID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IncreseSampleID
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
</UL>

<P><STRONG><a name="[dd]"></a>LCDbmpxx</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, lcd.o(i.LCDbmpxx))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCDbmpxx &rArr; prt_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_time
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_date
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_strip
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_los_table
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_loop
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_barcoard
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_unit
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_time_set
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_type_set
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_turbi
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_strip
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_sid
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_seqno
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_color
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_system_check
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_sysset
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_strip_set
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_setting
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_serial_data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_store
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set_seqno
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set_negpos
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set_lot
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_oper_set
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_oper_new
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_oper_info
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_memory
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_sid
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_seqno
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_oid
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_line8
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_measure
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_maintanence
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_los_table_store
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_datetime
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_date_set
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_change_PR
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_base_bar
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_unit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_time_set
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_sysset
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_setting
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_set
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_digit_pr
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_datetime
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_date_set
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_change_pr_set
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_QC
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_trubi_no
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_type
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_qc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_item_title
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_color_no
</UL>

<P><STRONG><a name="[37]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>NVIC_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
</UL>

<P><STRONG><a name="[102]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
</UL>

<P><STRONG><a name="[81]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.OTG_HS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OTG_HS_IRQHandler &rArr; USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>PORT_Config</STRONG> (Thumb, 410 bytes, Stack size 8 bytes, 32f429_port.o(i.PORT_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PORT_Config &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
</UL>

<P><STRONG><a name="[e3]"></a>PORT_LEDInit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, 32f429_port.o(i.PORT_LEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFR4k
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendRTC
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFR4k
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFR
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataRTC
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRTC
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Config
</UL>

<P><STRONG><a name="[e4]"></a>PORT_LEDOff</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, 32f429_port.o(i.PORT_LEDOff))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRTC
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFR256
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_clk02
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ck
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendWRSR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendRTC
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFR
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stat
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRTC
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFR4k
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFR4K
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_strip
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Config
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_first
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepb_loop
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepa_loop
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_loop
</UL>

<P><STRONG><a name="[e5]"></a>PORT_LEDOn</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, 32f429_port.o(i.PORT_LEDOn))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRTC
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFR256
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_clk02
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ck
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendWRSR
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendRTC
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFR
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stat
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRTC
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFR4k
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFR4K
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_strip
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_BUZZ
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Config
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_first
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepb_loop
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepa_loop
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_loop
</UL>

<P><STRONG><a name="[2f0]"></a>PORT_LEDTog</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, 32f429_port.o(i.PORT_LEDTog))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_loop
</UL>

<P><STRONG><a name="[3c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM4_LEDS_port
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSW_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM4_LEDS_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
</UL>

<P><STRONG><a name="[166]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockLPModeCmd))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[165]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[c7]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB3PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Init
</UL>

<P><STRONG><a name="[f2]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM4_TIMER_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
</UL>

<P><STRONG><a name="[c6]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[115]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[b5]"></a>ReadFileFromUSB</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, usb_file.o(i.ReadFileFromUSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 980<LI>Call Chain = ReadFileFromUSB &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HS_Process
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareUSB
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreUSB
</UL>

<P><STRONG><a name="[2eb]"></a>ReadLos12</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, eep.o(i.ReadLos12))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
</UL>

<P><STRONG><a name="[ec]"></a>ReadMemory</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, eep.o(i.ReadMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ReadMemory &rArr; chk_index &rArr; asc2bin4
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_index
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_userid
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_operid
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_los_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_home
</UL>

<P><STRONG><a name="[f1]"></a>STM_EVAL_COMInit</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, stm324x9i_eval.o(i.STM_EVAL_COMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = STM_EVAL_COMInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baud_usb
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baud_rs232
</UL>

<P><STRONG><a name="[3a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>Send720</STRONG> (Thumb, 1972 bytes, Stack size 16 bytes, meas.o(i.Send720))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Send720 &rArr; bin2bcdasc4
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_space2
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcdasc4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_view
</UL>

<P><STRONG><a name="[3d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 810 bytes, Stack size 8 bytes, usart.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM2_IRQHandler &rArr; adc_loop &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepb_loop
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepa_loop
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TIM5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM5_IRQHandler &rArr; USB_OTG_BSP_TimerIRQ &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetUsec
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[a8]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetUsec
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[a5]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetUsec
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM4_TIMER_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>

<P><STRONG><a name="[101]"></a>TIM_Config</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.TIM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
</UL>

<P><STRONG><a name="[168]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
</UL>

<P><STRONG><a name="[a6]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetUsec
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[108]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM4_PWM_Init
</UL>

<P><STRONG><a name="[109]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM4_PWM_Init
</UL>

<P><STRONG><a name="[104]"></a>TIM_SetUsec</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, usart.o(i.TIM_SetUsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_SetUsec
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
</UL>

<P><STRONG><a name="[a7]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetUsec
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM4_TIMER_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[105]"></a>TM4_LEDS_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tm_adc.o(i.TM4_LEDS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TM4_LEDS_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_BUZZ
</UL>

<P><STRONG><a name="[106]"></a>TM4_LEDS_port</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tm_adc.o(i.TM4_LEDS_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TM4_LEDS_port &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
</UL>

<P><STRONG><a name="[107]"></a>TM4_PWM_Init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tm_adc.o(i.TM4_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TM4_PWM_Init &rArr; TIM_OC2Init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_BUZZ
</UL>

<P><STRONG><a name="[10a]"></a>TM4_TIMER_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tm_adc.o(i.TM4_TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM4_TIMER_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_BUZZ
</UL>

<P><STRONG><a name="[10b]"></a>TM_ADC_INT_Channel_4_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tm_adc.o(i.TM_ADC_INT_Channel_4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TM_ADC_INT_Channel_4_Init &rArr; TM_ADC_INT_InitPin &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[10d]"></a>TM_ADC_INT_Channel_5_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tm_adc.o(i.TM_ADC_INT_Channel_5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TM_ADC_INT_Channel_5_Init &rArr; TM_ADC_INT_InitPin &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[10e]"></a>TM_ADC_INT_Channel_6_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tm_adc.o(i.TM_ADC_INT_Channel_6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TM_ADC_INT_Channel_6_Init &rArr; TM_ADC_INT_InitPin &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[10f]"></a>TM_ADC_INT_Channel_7_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tm_adc.o(i.TM_ADC_INT_Channel_7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TM_ADC_INT_Channel_7_Init &rArr; TM_ADC_INT_InitPin &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[10c]"></a>TM_ADC_INT_InitPin</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tm_adc.o(i.TM_ADC_INT_InitPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TM_ADC_INT_InitPin &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_7_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_6_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_5_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_4_Init
</UL>

<P><STRONG><a name="[110]"></a>TM_ADC_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tm_adc.o(i.TM_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = TM_ADC_Init &rArr; TM_ADC_InitADC &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_InitADC
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_7_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_6_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_5_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_INT_Channel_4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADC
</UL>

<P><STRONG><a name="[111]"></a>TM_ADC_InitADC</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, tm_adc.o(i.TM_ADC_InitADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TM_ADC_InitADC &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>

<P><STRONG><a name="[f4]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
</UL>

<P><STRONG><a name="[114]"></a>USART_Config</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, usart.o(i.USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USART_Config &rArr; STM_EVAL_COMInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
</UL>

<P><STRONG><a name="[fd]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
</UL>

<P><STRONG><a name="[fe]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[25f]"></a>USBFatReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_file.o(i.USBFatReady))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_update
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnb_update
</UL>

<P><STRONG><a name="[116]"></a>USBH_Alloc_Channel</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_hcs.o(i.USBH_Alloc_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_Alloc_Channel
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetFreeChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[118]"></a>USBH_BulkReceiveData</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_BulkReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[119]"></a>USBH_BulkSendData</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_BulkSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[11a]"></a>USBH_ClrFeature</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usbh_stdreq.o(i.USBH_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
</UL>

<P><STRONG><a name="[24]"></a>USBH_Connected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_Connected))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[11c]"></a>USBH_CtlReceiveData</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_CtlReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_CtlReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[11b]"></a>USBH_CtlReq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_CtlReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SubmitSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GETMaxLUN
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Set_Protocol
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Set_Idle
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
</UL>

<P><STRONG><a name="[11e]"></a>USBH_CtlSendData</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_CtlSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[11f]"></a>USBH_CtlSendSetup</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbh_ioreq.o(i.USBH_CtlSendSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBH_CtlSendSetup &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[159]"></a>USBH_DeAllocate_AllChannel</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_DeAllocate_AllChannel))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[120]"></a>USBH_DeInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[25]"></a>USBH_Disconnected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_Disconnected))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[158]"></a>USBH_ErrorHandle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_ErrorHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_ErrorHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[121]"></a>USBH_Free_Channel</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_Free_Channel))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceDeInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
</UL>

<P><STRONG><a name="[122]"></a>USBH_GetDescriptor</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, usbh_stdreq.o(i.USBH_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_HID_ReportDescriptor
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_HID_Descriptor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[152]"></a>USBH_GetNextDesc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_GetNextDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_GetNextDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[123]"></a>USBH_Get_CfgDesc</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, usbh_stdreq.o(i.USBH_Get_CfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc &rArr; USBH_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[125]"></a>USBH_Get_DevDesc</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, usbh_stdreq.o(i.USBH_Get_DevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_Get_DevDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseDevDesc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[129]"></a>USBH_Get_StringDesc</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, usbh_stdreq.o(i.USBH_Get_StringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseStringDesc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[9]"></a>USBH_HID_USR_Configuration_DescAvailable</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, usbh_hid_usr.o(i.USBH_HID_USR_Configuration_DescAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_HID_USR_Configuration_DescAvailable &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_usr.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>USBH_HID_USR_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_hid_usr.o(i.USBH_HID_USR_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_usr.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBH_HID_USR_DeviceAddressAssigned</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_hid_usr.o(i.USBH_HID_USR_DeviceAddressAssigned))
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_usr.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USBH_HID_USR_DeviceAttached</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_hid_usr.o(i.USBH_HID_USR_DeviceAttached))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_HID_USR_DeviceAttached &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_usr.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBH_HID_USR_DeviceDisconnected</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbh_hid_usr.o(i.USBH_HID_USR_DeviceDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_HID_USR_DeviceDisconnected &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_usr.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USBH_HID_USR_DeviceNotSupported</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_hid_usr.o(i.USBH_HID_USR_DeviceNotSupported))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_HID_USR_DeviceNotSupported &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_usr.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBH_HID_USR_DeviceSpeedDetected</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_hid_usr.o(i.USBH_HID_USR_DeviceSpeedDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_HID_USR_DeviceSpeedDetected &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_usr.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBH_HID_USR_Device_DescAvailable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbh_hid_usr.o(i.USBH_HID_USR_Device_DescAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_HID_USR_Device_DescAvailable &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_usr.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBH_HID_USR_EnumerationDone</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbh_hid_usr.o(i.USBH_HID_USR_EnumerationDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_HID_USR_EnumerationDone &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_usr.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>USBH_HID_USR_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_hid_usr.o(i.USBH_HID_USR_Init))
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_usr.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>USBH_HID_USR_Manufacturer_String</STRONG> (Thumb, 26 bytes, Stack size 112 bytes, usbh_hid_usr.o(i.USBH_HID_USR_Manufacturer_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBH_HID_USR_Manufacturer_String &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_usr.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>USBH_HID_USR_OverCurrentDetected</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_hid_usr.o(i.USBH_HID_USR_OverCurrentDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_HID_USR_OverCurrentDetected &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_usr.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBH_HID_USR_Product_String</STRONG> (Thumb, 26 bytes, Stack size 112 bytes, usbh_hid_usr.o(i.USBH_HID_USR_Product_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBH_HID_USR_Product_String &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_usr.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBH_HID_USR_ResetDevice</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_hid_usr.o(i.USBH_HID_USR_ResetDevice))
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_usr.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBH_HID_USR_SerialNum_String</STRONG> (Thumb, 26 bytes, Stack size 112 bytes, usbh_hid_usr.o(i.USBH_HID_USR_SerialNum_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBH_HID_USR_SerialNum_String &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_usr.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBH_HID_USR_UnrecoveredError</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_hid_usr.o(i.USBH_HID_USR_UnrecoveredError))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_HID_USR_UnrecoveredError &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_usr.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBH_HID_USR_UserInput</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_hid_usr.o(i.USBH_HID_USR_UserInput))
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_usr.o(.data)
</UL>
<P><STRONG><a name="[134]"></a>USBH_HandleControl</STRONG> (Thumb, 550 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_HandleControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_HandleControl &rArr; USBH_CtlSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentFrame
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[139]"></a>USBH_Init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBH_Init &rArr; HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FS_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HS_Init
</UL>

<P><STRONG><a name="[12f]"></a>USBH_InterruptReceiveData</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_InterruptReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_InterruptReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
</UL>

<P><STRONG><a name="[13a]"></a>USBH_MSC_BOT_Abort</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_MSC_BOT_Abort &rArr; USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[13b]"></a>USBH_MSC_DecodeCSW</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usbh_msc_bot.o(i.USBH_MSC_DecodeCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_MSC_DecodeCSW
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetXferCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[140]"></a>USBH_MSC_ErrorHandle</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, usbh_msc_core.o(i.USBH_MSC_ErrorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[143]"></a>USBH_MSC_HandleBOTXfer</STRONG> (Thumb, 990 bytes, Stack size 32 bytes, usbh_msc_bot.o(i.USBH_MSC_HandleBOTXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[13e]"></a>USBH_MSC_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbh_msc_bot.o(i.USBH_MSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MSC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[142]"></a>USBH_MSC_ModeSense6</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_ModeSense6))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_ModeSense6
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[145]"></a>USBH_MSC_Read10</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, usbh_msc_scsi.o(i.USBH_MSC_Read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_MSC_Read10
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[141]"></a>USBH_MSC_ReadCapacity10</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_ReadCapacity10))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_ReadCapacity10
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[144]"></a>USBH_MSC_RequestSense</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_RequestSense
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[13f]"></a>USBH_MSC_TestUnitReady</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_TestUnitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[146]"></a>USBH_MSC_Write10</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, usbh_msc_scsi.o(i.USBH_MSC_Write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_Write10
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[136]"></a>USBH_Modify_Channel</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbh_hcs.o(i.USBH_Modify_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBH_Modify_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[e1]"></a>USBH_OTG_ISR_Handler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USBH_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_sof_ISR
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_Disconnect_ISR
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_IRQHandler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>USBH_Open_Channel</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usbh_hcs.o(i.USBH_Open_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[124]"></a>USBH_ParseCfgDesc</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, usbh_stdreq.o(i.USBH_ParseCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_ParseCfgDesc &rArr; USBH_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetNextDesc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseInterfaceDesc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseEPDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[27]"></a>USBH_PortDisabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_PortDisabled))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>USBH_PortEnabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_PortEnabled))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[155]"></a>USBH_Process</STRONG> (Thumb, 476 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc &rArr; USBH_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsPortEnabled
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentSpeed
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeAllocate_AllChannel
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ErrorHandle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FS_Process
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HS_Process
</UL>

<P><STRONG><a name="[23]"></a>USBH_SOF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_SOF))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[137]"></a>USBH_SetAddress</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_stdreq.o(i.USBH_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_SetAddress &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[138]"></a>USBH_SetCfg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_stdreq.o(i.USBH_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_SetCfg &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[1a]"></a>USBH_USR_Configuration_DescAvailable</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, usbh_msc_usr.o(i.USBH_USR_Configuration_DescAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_USR_Configuration_DescAvailable &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBH_USR_DeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>USBH_USR_DeviceAddressAssigned</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_DeviceAddressAssigned))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBH_USR_DeviceAttached</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_DeviceAttached))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_USR_DeviceAttached &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBH_USR_DeviceDisconnected</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_DeviceDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_USR_DeviceDisconnected &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>USBH_USR_DeviceNotSupported</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_DeviceNotSupported))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_USR_DeviceNotSupported &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USBH_USR_DeviceSpeedDetected</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_DeviceSpeedDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_USR_DeviceSpeedDetected &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBH_USR_Device_DescAvailable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbh_msc_usr.o(i.USBH_USR_Device_DescAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_USR_Device_DescAvailable &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>USBH_USR_EnumerationDone</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_EnumerationDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_USR_EnumerationDone &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBH_USR_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_Init))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>USBH_USR_MSC_Application</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_MSC_Application))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = USBH_USR_MSC_Application &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>USBH_USR_Manufacturer_String</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_Manufacturer_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_USR_Manufacturer_String &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>USBH_USR_OverCurrentDetected</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_OverCurrentDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_USR_OverCurrentDetected &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>USBH_USR_Product_String</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_Product_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_USR_Product_String &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBH_USR_ResetDevice</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_ResetDevice))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>USBH_USR_SerialNum_String</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_SerialNum_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_USR_SerialNum_String &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>USBH_USR_UnrecoveredError</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_UnrecoveredError))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_USR_UnrecoveredError &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>USBH_USR_UserInput</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_UserInput))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[15c]"></a>USB_FS_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usb.o(i.USB_FS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USB_FS_Init &rArr; USBH_Init &rArr; HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>USB_FS_Process</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb.o(i.USB_FS_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = USB_FS_Process &rArr; USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc &rArr; USBH_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[160]"></a>USB_HS_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usb.o(i.USB_HS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USB_HS_Init &rArr; USBH_Init &rArr; HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bmp
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_fw
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
</UL>

<P><STRONG><a name="[eb]"></a>USB_HS_Process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb.o(i.USB_HS_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = USB_HS_Process &rArr; USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc &rArr; USBH_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_update
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnb_update
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileFromUSB
</UL>

<P><STRONG><a name="[161]"></a>USB_OTG_BSP_ConfigVBUS</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_ConfigVBUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_BSP_ConfigVBUS &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[163]"></a>USB_OTG_BSP_DriveVBUS</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_DriveVBUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_BSP_DriveVBUS
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>

<P><STRONG><a name="[15e]"></a>USB_OTG_BSP_EnableInterrupt</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_BSP_EnableInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FS_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HS_Init
</UL>

<P><STRONG><a name="[15d]"></a>USB_OTG_BSP_Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_BSP_Init &rArr; USB_OTG_BSP_TimeInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockLPModeCmd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FS_Init
</UL>

<P><STRONG><a name="[100]"></a>USB_OTG_BSP_TimerIRQ</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_TimerIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_BSP_TimerIRQ &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>USB_OTG_BSP_mDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FS_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileFromUSB
</UL>

<P><STRONG><a name="[169]"></a>USB_OTG_BSP_uDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_uDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>

<P><STRONG><a name="[d3]"></a>USB_OTG_CoreInit</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_OTG_CoreInit &rArr; USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[d5]"></a>USB_OTG_CoreInitHost</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_CoreInitHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USB_OTG_CoreInitHost &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[d2]"></a>USB_OTG_DisableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_DisableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[15a]"></a>USB_OTG_DriveVbus</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_DriveVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_DriveVbus &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[d6]"></a>USB_OTG_EnableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EnableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EnableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[16e]"></a>USB_OTG_EnableHostInt</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EnableHostInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_EnableHostInt &rArr; USB_OTG_EnableCommonInt
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[16d]"></a>USB_OTG_FlushRxFifo</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[16c]"></a>USB_OTG_FlushTxFifo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[172]"></a>USB_OTG_GetMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
</UL>

<P><STRONG><a name="[176]"></a>USB_OTG_HC_DoPing</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_HC_DoPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
</UL>

<P><STRONG><a name="[132]"></a>USB_OTG_HC_Halt</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceDeInit
</UL>

<P><STRONG><a name="[147]"></a>USB_OTG_HC_Init</STRONG> (Thumb, 568 bytes, Stack size 28 bytes, usb_core.o(i.USB_OTG_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
</UL>

<P><STRONG><a name="[da]"></a>USB_OTG_HC_StartXfer</STRONG> (Thumb, 502 bytes, Stack size 60 bytes, usb_core.o(i.USB_OTG_HC_StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsEvenFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[16b]"></a>USB_OTG_InitFSLSPClkSel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_InitFSLSPClkSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[12e]"></a>USB_OTG_IsEvenFrame</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_IsEvenFrame))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
</UL>

<P><STRONG><a name="[148]"></a>USB_OTG_IsHostMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usb_core.o(i.USB_OTG_IsHostMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_OTG_IsHostMode
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[149]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadCoreItr))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[16f]"></a>USB_OTG_ReadHPRT0</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_ReadHPRT0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>

<P><STRONG><a name="[173]"></a>USB_OTG_ReadHostAllChannels_intr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadHostAllChannels_intr))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[177]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
</UL>

<P><STRONG><a name="[d8]"></a>USB_OTG_ResetPort</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[d1]"></a>USB_OTG_SelectCore</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_SelectCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_SelectCore
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[d4]"></a>USB_OTG_SetCurrentMode</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_SetCurrentMode &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[171]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>

<P><STRONG><a name="[dc]"></a>USR_KEYBRD_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_hid_usr.o(i.USR_KEYBRD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USR_KEYBRD_Init &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBRD_Init
</UL>

<P><STRONG><a name="[db]"></a>USR_KEYBRD_ProcessData</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, usbh_hid_usr.o(i.USR_KEYBRD_ProcessData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USR_KEYBRD_ProcessData &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBRD_Decode
</UL>

<P><STRONG><a name="[e0]"></a>USR_MOUSE_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_hid_usr.o(i.USR_MOUSE_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOUSE_Init
</UL>

<P><STRONG><a name="[df]"></a>USR_MOUSE_ProcessData</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_hid_usr.o(i.USR_MOUSE_ProcessData))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOUSE_Decode
</UL>

<P><STRONG><a name="[2bc]"></a>Uart_Send2</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart.o(i.Uart_Send2))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf2
</UL>

<P><STRONG><a name="[2be]"></a>Uart_Send3</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart.o(i.Uart_Send3))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf3
</UL>

<P><STRONG><a name="[39]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[178]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[303]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[b2]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_time
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_date
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_index
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_los_table
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_barcoard
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_time_set
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_seqno
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_strip_set
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set_seqno
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_memory
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_sid
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_oid
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_los_table_store
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_datetime
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_date_set
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_change_PR
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_time_set
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_new
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_fw
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_digit_pr
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_datetime
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_date_set
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_mem_seq
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_USR_SerialNum_String
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_USR_Product_String
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_USR_Manufacturer_String
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareUSB
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreUSB
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_check
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_seqno2dgtstr
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_sample8
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_oper8
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_number8
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_format
</UL>

<P><STRONG><a name="[304]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[305]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[17a]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[306]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[307]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[308]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[2af]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf3
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg24
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg16
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf2
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_save
</UL>

<P><STRONG><a name="[309]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[30a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[30b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ff]"></a>adc_loop</STRONG> (Thumb, 390 bytes, Stack size 8 bytes, tm_adc.o(i.adc_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = adc_loop &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[181]"></a>add_index</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, eep.o(i.add_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = add_index &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
</UL>

<P><STRONG><a name="[f0]"></a>add_los_memory</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dsp.o(i.add_los_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add_los_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMemory
</UL>

<P><STRONG><a name="[2d9]"></a>add_los_test</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dsp.o(i.add_los_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add_los_test
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
</UL>

<P><STRONG><a name="[182]"></a>alpa_mem_oid</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, touch.o(i.alpa_mem_oid))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = alpa_mem_oid &rArr; dsp_mem_set_oid &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_oid
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_mem_oid
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_error
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
</UL>

<P><STRONG><a name="[186]"></a>alpa_mem_seq</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, touch.o(i.alpa_mem_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = alpa_mem_seq &rArr; dsp_mem_set_seqno &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_seqno
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_mem_seq
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_cursor_mem_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_error
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
</UL>

<P><STRONG><a name="[18a]"></a>alpa_mem_sid</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, touch.o(i.alpa_mem_sid))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = alpa_mem_sid &rArr; dsp_mem_set_sid &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_sid
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_mem_sid
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_error
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
</UL>

<P><STRONG><a name="[18d]"></a>alpa_qc_lot</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, touch.o(i.alpa_qc_lot))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = alpa_qc_lot &rArr; dsp_qc_set_lot &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set_lot
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_qc_lot
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_cursor_qc_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_error
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set
</UL>

<P><STRONG><a name="[191]"></a>alpa_test_sid</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, touch.o(i.alpa_test_sid))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = alpa_test_sid &rArr; dsp_test_set_sid &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_sid
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_test_sid
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_cursor_test_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_error
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set
</UL>

<P><STRONG><a name="[195]"></a>asc2bin4</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, lcd.o(i.asc2bin4))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = asc2bin4
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asc2bin_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_result
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_index
</UL>

<P><STRONG><a name="[196]"></a>asc2bin_1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i.asc2bin_1))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asc2bin4
</UL>

<P><STRONG><a name="[2ad]"></a>asc2dec</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, eep.o(i.asc2dec))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_position
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_parameter
</UL>

<P><STRONG><a name="[2ae]"></a>asc2hex</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, eep.o(i.asc2hex))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_strip_info
</UL>

<P><STRONG><a name="[1a7]"></a>backup_intflash</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, eep.o(i.backup_intflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = backup_intflash
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_vars
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_oper_buff
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_strip_no
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sysid
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_strip_info
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_position
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_para
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_pform_write
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_id
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_strip
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_printform
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_position
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_para
</UL>

<P><STRONG><a name="[2ea]"></a>backup_mem_set</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, dsp.o(i.backup_mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
</UL>

<P><STRONG><a name="[271]"></a>bcd2bin2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, resm.o(i.bcd2bin2))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTime
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAllRTC
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRTC
</UL>

<P><STRONG><a name="[2c6]"></a>bin2bcd2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, resm.o(i.bin2bcd2))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAll_RTC
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTime
</UL>

<P><STRONG><a name="[197]"></a>bin2bcd6</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, lcd.o(i.bin2bcd6))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcdasc4
</UL>

<P><STRONG><a name="[f7]"></a>bin2bcdasc4</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, lcd.o(i.bin2bcdasc4))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bin2bcdasc4
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd6
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_copy
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_result
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send720
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_time_read
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_print_time
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_result
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_result
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result
</UL>

<P><STRONG><a name="[199]"></a>bin2hexasc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd.o(i.bin2hexasc))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2hexasc4
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_result
</UL>

<P><STRONG><a name="[198]"></a>bin2hexasc4</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, lcd.o(i.bin2hexasc4))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bin2hexasc4
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2hexasc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_strip_no_read
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_full_raw_data
</UL>

<P><STRONG><a name="[19a]"></a>blankFR4K</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, resm.o(i.blankFR4K))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFR4k
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFR
</UL>

<P><STRONG><a name="[19c]"></a>calc_ratio2</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, meas.o(i.calc_ratio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = calc_ratio2 &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
</UL>

<P><STRONG><a name="[2e9]"></a>cancel_mem_set</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, dsp.o(i.cancel_mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
</UL>

<P><STRONG><a name="[2ec]"></a>cancel_qc_set</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, dsp.o(i.cancel_qc_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cancel_qc_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_wait
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set_strip
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set
</UL>

<P><STRONG><a name="[2ee]"></a>cancel_test_set</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, dsp.o(i.cancel_test_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cancel_test_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_wait
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_turbi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_strip
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_color
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set
</UL>

<P><STRONG><a name="[19f]"></a>check_result</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, eep.o(i.check_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = check_result &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFR4k
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_index
</UL>

<P><STRONG><a name="[1a0]"></a>chk_barcoard</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, main.o(i.chk_barcoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = chk_barcoard &rArr; dsp_los_table &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_los_table
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a3]"></a>chk_com_dly</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, com.o(i.chk_com_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = chk_com_dly &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>chk_index</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, eep.o(i.chk_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chk_index &rArr; asc2bin4
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asc2bin4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMemory
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_sample8
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_oper8
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_number8
</UL>

<P><STRONG><a name="[1a4]"></a>chk_ini_para</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, eep.o(i.chk_ini_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = chk_ini_para &rArr; restore_sflash &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_parameter
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_intflash
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_sflash
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_int2ext
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer2
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_sum_int_buff
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_sum_ext_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
</UL>

<P><STRONG><a name="[1ac]"></a>chk_ini_position</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, eep.o(i.chk_ini_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = chk_ini_position &rArr; restore_sflash &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_position
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_intflash
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_sflash
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_int2ext
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer2
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_sum_int_buff
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_sum_ext_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
</UL>

<P><STRONG><a name="[1ae]"></a>chk_ini_printform</STRONG> (Thumb, 540 bytes, Stack size 24 bytes, eep.o(i.chk_ini_printform))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = chk_ini_printform &rArr; restore_sflash &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_printform
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_intflash
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_sflash
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_int2ext
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer2
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_sum_int_buff
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_sum_ext_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
</UL>

<P><STRONG><a name="[1b0]"></a>chk_ini_strip</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, eep.o(i.chk_ini_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = chk_ini_strip &rArr; restore_sflash &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_strip_info
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_stripno
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_intflash
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_sflash
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_int2ext
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer2
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_sum_int_buff
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_sum_ext_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
</UL>

<P><STRONG><a name="[1a5]"></a>chk_sum_ext_buff</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, eep.o(i.chk_sum_ext_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = chk_sum_ext_buff &rArr; prt_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_strip
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_printform
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_position
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_para
</UL>

<P><STRONG><a name="[1a6]"></a>chk_sum_int_buff</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, eep.o(i.chk_sum_int_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = chk_sum_int_buff &rArr; prt_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_strip
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_printform
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_position
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_para
</UL>

<P><STRONG><a name="[29e]"></a>chk_table</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, resm.o(i.chk_table))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[187]"></a>clr_cursor_mem_set</STRONG> (Thumb, 188 bytes, Stack size 12 bytes, lcd.o(i.clr_cursor_mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clr_cursor_mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_mem_seq
</UL>

<P><STRONG><a name="[18f]"></a>clr_cursor_qc_set</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, lcd.o(i.clr_cursor_qc_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clr_cursor_qc_set
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_qc_lot
</UL>

<P><STRONG><a name="[193]"></a>clr_cursor_test_set</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, lcd.o(i.clr_cursor_test_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clr_cursor_test_set
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_test_sid
</UL>

<P><STRONG><a name="[206]"></a>clr_screen</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, dsp.o(i.clr_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clr_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_unit
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_sysset
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_store
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_memory
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_measure
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_maintanence
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_datetime
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_base_bar
</UL>

<P><STRONG><a name="[262]"></a>clr_screen_box</STRONG> (Thumb, 106 bytes, Stack size 28 bytes, lcd.o(i.clr_screen_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = clr_screen_box
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnb_update
</UL>

<P><STRONG><a name="[1b3]"></a>clr_sys_id</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, eep.o(i.clr_sys_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = clr_sys_id &rArr; store_sysid &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sysid
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
</UL>

<P><STRONG><a name="[2c8]"></a>clr_user_id</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, eep.o(i.clr_user_id))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eep_all
</UL>

<P><STRONG><a name="[1fe]"></a>clust2sect</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1b5]"></a>cmpFR4k</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, resm.o(i.cmpFR4k))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cmpFR4k &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFR4k
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sflash
</UL>

<P><STRONG><a name="[ef]"></a>cmp_operid</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, dsp.o(i.cmp_operid))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMemory
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_oper8
</UL>

<P><STRONG><a name="[ee]"></a>cmp_userid</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, dsp.o(i.cmp_userid))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMemory
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_sample8
</UL>

<P><STRONG><a name="[1b6]"></a>com_clear</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, usart.o(i.com_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = com_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx4
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx5
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx3
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
</UL>

<P><STRONG><a name="[1ba]"></a>com_full_raw_data</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, com.o(i.com_full_raw_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = com_full_raw_data &rArr; key_buzzer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2hexasc4
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx3
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1bc]"></a>com_meas_result</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, com.o(i.com_meas_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = com_meas_result &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx3
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1bd]"></a>com_msg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, com.o(i.com_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = com_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_strip_info
</UL>

<P><STRONG><a name="[1be]"></a>com_operid_set</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, com.o(i.com_operid_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = com_operid_set &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_space
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1c0]"></a>com_para_read</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, com.o(i.com_para_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = com_para_read &rArr; send_para &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_para
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1c2]"></a>com_para_write</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, com.o(i.com_para_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = com_para_write &rArr; store_para &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_para
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1c4]"></a>com_pform_read</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, com.o(i.com_pform_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = com_pform_read &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx3
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1c5]"></a>com_pform_write</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, com.o(i.com_pform_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = com_pform_write &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_vars
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sflash
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_printform
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_intflash
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1c8]"></a>com_position_read</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, com.o(i.com_position_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = com_position_read &rArr; send_position &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_position
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1ca]"></a>com_position_write</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, com.o(i.com_position_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = com_position_write &rArr; store_position &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_position
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1cc]"></a>com_strip_info_read</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, com.o(i.com_strip_info_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = com_strip_info_read &rArr; send_strip &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_strip
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1ce]"></a>com_strip_info_write</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, com.o(i.com_strip_info_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = com_strip_info_write &rArr; store_strip_info &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_strip_info
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1d0]"></a>com_strip_no_read</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, com.o(i.com_strip_no_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = com_strip_no_read &rArr; key_buzzer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2hexasc4
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1d1]"></a>com_strip_no_write</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, com.o(i.com_strip_no_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = com_strip_no_write &rArr; store_strip_no &rArr; write_id_chksum &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_strip_no
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[2e4]"></a>com_sys_check</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, com.o(i.com_sys_check))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1d3]"></a>com_sys_id_set</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, com.o(i.com_sys_id_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = com_sys_id_set &rArr; store_sysid &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sysid
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1d4]"></a>com_sys_info</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, com.o(i.com_sys_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = com_sys_info &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1d5]"></a>com_time_read</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, com.o(i.com_time_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = com_time_read &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcdasc4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1d6]"></a>com_time_write</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, com.o(i.com_time_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = com_time_write &rArr; sendAll_RTC &rArr; writeRTC &rArr; sendRTC &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAll_RTC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1d8]"></a>com_userid_set</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, com.o(i.com_userid_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = com_userid_set &rArr; store_userid &rArr; store_vars &rArr; write_id_chksum &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_userid
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1da]"></a>com_version_read</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, com.o(i.com_version_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = com_version_read &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
</UL>

<P><STRONG><a name="[1db]"></a>conv_result</STRONG> (Thumb, 1730 bytes, Stack size 32 bytes, meas.o(i.conv_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = conv_result &rArr; put_albumin &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx5
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd5
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_result2
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_result1
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_arb
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_albumin
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
</UL>

<P><STRONG><a name="[1e1]"></a>conv_result_store</STRONG> (Thumb, 1698 bytes, Stack size 32 bytes, meas.o(i.conv_result_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = conv_result_store &rArr; put_albumin &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx5
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd5
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_result2
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_result1
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_arb
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_albumin
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_view
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_QC
</UL>

<P><STRONG><a name="[1e2]"></a>correction_curve</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, meas.o(i.correction_curve))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = correction_curve &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_view
</UL>

<P><STRONG><a name="[1e9]"></a>dataRTC</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, resm.o(i.dataRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dataRTC &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_clk02
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRTC
</UL>

<P><STRONG><a name="[2e6]"></a>dayInMonth</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, touch.o(i.dayInMonth))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_date_set
</UL>

<P><STRONG><a name="[1eb]"></a>default_id</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, eep.o(i.default_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = default_id &rArr; write_id_chksum &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_id_chksum
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write24w
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_seqno
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_intflash
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_default_RGB
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
</UL>

<P><STRONG><a name="[1f0]"></a>del_index</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, eep.o(i.del_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = del_index &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_delete
</UL>

<P><STRONG><a name="[24d]"></a>delay_FR</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, resm.o(i.delay_FR))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFR256
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendWRSR
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stat
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFR4K
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec
</UL>

<P><STRONG><a name="[261]"></a>delay_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, resm.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bmp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_index
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_loop
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system_check
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_strip_info
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnb_update
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_fw
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_error
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer3
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer2
</UL>

<P><STRONG><a name="[1f1]"></a>delay_us</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, resm.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = delay_us &rArr; kdelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFR4k
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFR256
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFR4K
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system_check
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_update
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnb_update
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_meas_adj
</UL>

<P><STRONG><a name="[1f3]"></a>delete_memory_all</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, touch.o(i.delete_memory_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + In Cycle
<LI>Call Chain = delete_memory_all &rArr;  tch_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_read
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_fw_update
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
</UL>

<P><STRONG><a name="[1f6]"></a>delete_record</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, eep.o(i.delete_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = delete_record &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFR4k
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sflash
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_delete
</UL>

<P><STRONG><a name="[202]"></a>disk_initialize</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbh_msc_fatfs.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[2e3]"></a>disk_ioctl</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, usbh_msc_fatfs.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[203]"></a>disk_read</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbh_msc_fatfs.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = disk_read &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read10
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[25a]"></a>disk_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_msc_fatfs.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[204]"></a>disk_write</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, usbh_msc_fatfs.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write10
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[214]"></a>draw_box</STRONG> (Thumb, 104 bytes, Stack size 36 bytes, lcd.o(i.draw_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = draw_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_fw_update
</UL>

<P><STRONG><a name="[205]"></a>dsp_base_bar</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dsp.o(i.dsp_base_bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dsp_base_bar &rArr; dsp_time &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_time
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_date
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_system_check
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_setting
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_serial_data
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_oper_set
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_maintanence
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_image_update
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_fw_update
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_font_update
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_setting
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_digit_pr
</UL>

<P><STRONG><a name="[209]"></a>dsp_change_PR</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, dsp.o(i.dsp_change_PR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dsp_change_PR &rArr; type_pr_name &rArr; out_line_24 &rArr; out_text_24e
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_24
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_pr_name
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_setting
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_digit_pr
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_change_pr_set
</UL>

<P><STRONG><a name="[20c]"></a>dsp_color_no</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, dsp.o(i.dsp_color_no))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dsp_color_no &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_store
</UL>

<P><STRONG><a name="[20f]"></a>dsp_cursor_mem_date</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lcd.o(i.dsp_cursor_mem_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dsp_cursor_mem_date
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_date_set
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_date_set
</UL>

<P><STRONG><a name="[184]"></a>dsp_cursor_mem_oid</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lcd.o(i.dsp_cursor_mem_oid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dsp_cursor_mem_oid
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_mem_oid
</UL>

<P><STRONG><a name="[188]"></a>dsp_cursor_mem_seq</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lcd.o(i.dsp_cursor_mem_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dsp_cursor_mem_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_mem_seq
</UL>

<P><STRONG><a name="[18c]"></a>dsp_cursor_mem_sid</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lcd.o(i.dsp_cursor_mem_sid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dsp_cursor_mem_sid
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_mem_sid
</UL>

<P><STRONG><a name="[242]"></a>dsp_cursor_mem_time</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lcd.o(i.dsp_cursor_mem_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dsp_cursor_mem_time
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_time_set
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_time_set
</UL>

<P><STRONG><a name="[190]"></a>dsp_cursor_qc_lot</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lcd.o(i.dsp_cursor_qc_lot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dsp_cursor_qc_lot
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_qc_lot
</UL>

<P><STRONG><a name="[194]"></a>dsp_cursor_test_sid</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lcd.o(i.dsp_cursor_test_sid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dsp_cursor_test_sid
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_wait
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_turbi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_strip
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_color
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_test_sid
</UL>

<P><STRONG><a name="[207]"></a>dsp_date</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, dsp.o(i.dsp_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dsp_date &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTime
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_memory
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_base_bar
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_date_set
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_QC
</UL>

<P><STRONG><a name="[20e]"></a>dsp_date_set</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dsp.o(i.dsp_date_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dsp_date_set &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_mem_date
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_datetime
</UL>

<P><STRONG><a name="[210]"></a>dsp_datetime</STRONG> (Thumb, 780 bytes, Stack size 16 bytes, dsp.o(i.dsp_datetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dsp_datetime &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_screen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_time_set
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_setting
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_date_set
</UL>

<P><STRONG><a name="[211]"></a>dsp_first</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, main.o(i.dsp_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dsp_first &rArr; kdelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdelay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[212]"></a>dsp_font_update</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dsp.o(i.dsp_font_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dsp_font_update &rArr; dsp_base_bar &rArr; dsp_time &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_base_bar
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
</UL>

<P><STRONG><a name="[1f4]"></a>dsp_fw_update</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, dsp.o(i.dsp_fw_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = dsp_fw_update &rArr; out_line_48 &rArr; out_text_48e
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_32
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_base_bar
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_48
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_memory_all
</UL>

<P><STRONG><a name="[216]"></a>dsp_home</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, dsp.o(i.dsp_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dsp_home &rArr; dsp_time &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_time
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_date
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_unit
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_system_chk
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_sysset
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_setting
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_set
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_view
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_delete
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_measure
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_serial
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_image
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_fw
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_font
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_cali
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_datetime
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_change_pr_set
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_QC
</UL>

<P><STRONG><a name="[217]"></a>dsp_image_update</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dsp.o(i.dsp_image_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dsp_image_update &rArr; dsp_base_bar &rArr; dsp_time &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_base_bar
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bmp
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
</UL>

<P><STRONG><a name="[218]"></a>dsp_item_tb</STRONG> (Thumb, 554 bytes, Stack size 88 bytes, dsp.o(i.dsp_item_tb))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_item_title
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_store
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_qc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result
</UL>

<P><STRONG><a name="[219]"></a>dsp_item_title</STRONG> (Thumb, 640 bytes, Stack size 8 bytes, dsp.o(i.dsp_item_title))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_qc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_item_tb
</UL>

<P><STRONG><a name="[1a2]"></a>dsp_los_table</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, dsp.o(i.dsp_los_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dsp_los_table &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_barcoard
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_store
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_QC
</UL>

<P><STRONG><a name="[21a]"></a>dsp_los_table_store</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, dsp.o(i.dsp_los_table_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dsp_los_table_store &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_store
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_view
</UL>

<P><STRONG><a name="[21b]"></a>dsp_maintanence</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, dsp.o(i.dsp_maintanence))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dsp_maintanence &rArr; dsp_base_bar &rArr; dsp_time &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_base_bar
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_sysset
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_serial
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_image
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_fw
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_font
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_cali
</UL>

<P><STRONG><a name="[21c]"></a>dsp_measure</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, dsp.o(i.dsp_measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dsp_measure &rArr; out_line_24 &rArr; out_text_24e
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_24
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_strip_set
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_set
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_home
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_QC
</UL>

<P><STRONG><a name="[21d]"></a>dsp_mem_line8</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, dsp.o(i.dsp_mem_line8))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dsp_mem_line8 &rArr; dsp_mem_sample8 &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_sample8
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_oper8
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_number8
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_memory
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
</UL>

<P><STRONG><a name="[21e]"></a>dsp_mem_number8</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, dsp.o(i.dsp_mem_number8))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dsp_mem_number8 &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_index
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_seqno2dgtstr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_line8
</UL>

<P><STRONG><a name="[220]"></a>dsp_mem_oper8</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, dsp.o(i.dsp_mem_oper8))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dsp_mem_oper8 &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_index
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_seqno2dgtstr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_operid
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_line8
</UL>

<P><STRONG><a name="[21f]"></a>dsp_mem_sample8</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, dsp.o(i.dsp_mem_sample8))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dsp_mem_sample8 &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_index
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_seqno2dgtstr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_userid
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_line8
</UL>

<P><STRONG><a name="[222]"></a>dsp_mem_set</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, dsp.o(i.dsp_mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dsp_mem_set &rArr; dsp_mem_set_sid &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_type_set
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_sid
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_seqno
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_oid
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
</UL>

<P><STRONG><a name="[183]"></a>dsp_mem_set_oid</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, dsp.o(i.dsp_mem_set_oid))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dsp_mem_set_oid &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_mem_oid
</UL>

<P><STRONG><a name="[189]"></a>dsp_mem_set_seqno</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, dsp.o(i.dsp_mem_set_seqno))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dsp_mem_set_seqno &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_mem_seq
</UL>

<P><STRONG><a name="[18b]"></a>dsp_mem_set_sid</STRONG> (Thumb, 488 bytes, Stack size 8 bytes, dsp.o(i.dsp_mem_set_sid))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dsp_mem_set_sid &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_mem_sid
</UL>

<P><STRONG><a name="[224]"></a>dsp_memory</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, dsp.o(i.dsp_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dsp_memory &rArr; dsp_mem_line8 &rArr; dsp_mem_sample8 &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_time
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_date
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_line8
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_type
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_screen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_view
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_delete
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_home
</UL>

<P><STRONG><a name="[226]"></a>dsp_oper_info</STRONG> (Thumb, 476 bytes, Stack size 16 bytes, dsp.o(i.dsp_oper_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dsp_oper_info &rArr; out_line_24 &rArr; out_text_24e
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_24
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_oper_set
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_set
</UL>

<P><STRONG><a name="[227]"></a>dsp_oper_name</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dsp.o(i.dsp_oper_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dsp_oper_name &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_box0
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_new
</UL>

<P><STRONG><a name="[229]"></a>dsp_oper_new</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dsp.o(i.dsp_oper_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dsp_oper_new &rArr; LCDbmpxx &rArr; prt_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_set
</UL>

<P><STRONG><a name="[22a]"></a>dsp_oper_set</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, dsp.o(i.dsp_oper_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dsp_oper_set &rArr; dsp_oper_info &rArr; out_line_24 &rArr; out_text_24e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_oper_info
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_base_bar
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_setting
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_set
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_new
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_measure
</UL>

<P><STRONG><a name="[22b]"></a>dsp_qc</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, dsp.o(i.dsp_qc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dsp_qc &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_los_table
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_strip_name
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_item_tb
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_screen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_wait
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set_strip
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_measure
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_QC
</UL>

<P><STRONG><a name="[22d]"></a>dsp_qc_set</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, dsp.o(i.dsp_qc_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dsp_qc_set &rArr; dsp_qc_set_seqno &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set_seqno
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set_negpos
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set_lot
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_strip_name
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_wait
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set_strip
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_QC
</UL>

<P><STRONG><a name="[18e]"></a>dsp_qc_set_lot</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dsp.o(i.dsp_qc_set_lot))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dsp_qc_set_lot &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_wait
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set_strip
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_qc_lot
</UL>

<P><STRONG><a name="[22f]"></a>dsp_qc_set_negpos</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, dsp.o(i.dsp_qc_set_negpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dsp_qc_set_negpos &rArr; LCDbmpxx &rArr; prt_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_wait
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set_strip
</UL>

<P><STRONG><a name="[22e]"></a>dsp_qc_set_seqno</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, dsp.o(i.dsp_qc_set_seqno))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dsp_qc_set_seqno &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set_strip
</UL>

<P><STRONG><a name="[230]"></a>dsp_result</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, dsp.o(i.dsp_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dsp_result &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_time
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcdasc4
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_seqno2dgtstr
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_item_title
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_item_tb
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
</UL>

<P><STRONG><a name="[232]"></a>dsp_result_qc</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, dsp.o(i.dsp_result_qc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dsp_result_qc &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_time
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_seqno2dgtstr
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_item_title
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_item_tb
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
</UL>

<P><STRONG><a name="[233]"></a>dsp_result_store</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, dsp.o(i.dsp_result_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dsp_result_store &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_time
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_los_table
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_los_table_store
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_seqno2dgtstr
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_trubi_no
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_item_tb
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_color_no
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_view
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_QC
</UL>

<P><STRONG><a name="[235]"></a>dsp_serial_data</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, dsp.o(i.dsp_serial_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dsp_serial_data &rArr; out_line_24 &rArr; out_text_24e
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_24
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_base_bar
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_serial
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
</UL>

<P><STRONG><a name="[236]"></a>dsp_setting</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, dsp.o(i.dsp_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dsp_setting &rArr; dsp_base_bar &rArr; dsp_time &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_base_bar
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_unit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_system_chk
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_sysset
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_set
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_home
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_datetime
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_change_pr_set
</UL>

<P><STRONG><a name="[237]"></a>dsp_strip</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dsp.o(i.dsp_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dsp_strip &rArr; LCDbmpxx &rArr; prt_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_loop
</UL>

<P><STRONG><a name="[238]"></a>dsp_strip_set</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, dsp.o(i.dsp_strip_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dsp_strip_set &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_box0
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_strip_name
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_strip_set
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_measure
</UL>

<P><STRONG><a name="[239]"></a>dsp_sysset</STRONG> (Thumb, 708 bytes, Stack size 8 bytes, dsp.o(i.dsp_sysset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dsp_sysset &rArr; LCDbmpxx &rArr; prt_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_setting
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
</UL>

<P><STRONG><a name="[23a]"></a>dsp_system_check</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, dsp.o(i.dsp_system_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dsp_system_check &rArr; dsp_base_bar &rArr; dsp_time &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_base_bar
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_setting
</UL>

<P><STRONG><a name="[23b]"></a>dsp_test</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, dsp.o(i.dsp_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dsp_test &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_los_table
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_strip_name
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_trubi_no
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_item_tb
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_color_no
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_screen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_wait
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_turbi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_strip
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_color
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_measure
</UL>

<P><STRONG><a name="[23c]"></a>dsp_test_set</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, dsp.o(i.dsp_test_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dsp_test_set &rArr; dsp_trubi_no &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_sid
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_seqno
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_strip_name
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_trubi_no
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_color_no
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_wait
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_turbi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_strip
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_color
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
</UL>

<P><STRONG><a name="[23e]"></a>dsp_test_set_color</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, dsp.o(i.dsp_test_set_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dsp_test_set_color &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_wait
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_turbi
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_color
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
</UL>

<P><STRONG><a name="[23d]"></a>dsp_test_set_seqno</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, dsp.o(i.dsp_test_set_seqno))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dsp_test_set_seqno &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set
</UL>

<P><STRONG><a name="[192]"></a>dsp_test_set_sid</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dsp.o(i.dsp_test_set_sid))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dsp_test_set_sid &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_wait
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_test_sid
</UL>

<P><STRONG><a name="[23f]"></a>dsp_test_set_strip</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dsp.o(i.dsp_test_set_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dsp_test_set_strip &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_wait
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_turbi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_strip
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_wait
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set_strip
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_QC
</UL>

<P><STRONG><a name="[240]"></a>dsp_test_set_turbi</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, dsp.o(i.dsp_test_set_turbi))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dsp_test_set_turbi &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_wait
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_strip
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_color
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
</UL>

<P><STRONG><a name="[225]"></a>dsp_test_type</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dsp.o(i.dsp_test_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dsp_test_type &rArr; LCDbmpxx &rArr; prt_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_memory
</UL>

<P><STRONG><a name="[223]"></a>dsp_test_type_set</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dsp.o(i.dsp_test_type_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dsp_test_type_set &rArr; LCDbmpxx &rArr; prt_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
</UL>

<P><STRONG><a name="[208]"></a>dsp_time</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, dsp.o(i.dsp_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dsp_time &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTime
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_memory
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_base_bar
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_QC
</UL>

<P><STRONG><a name="[241]"></a>dsp_time_set</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, dsp.o(i.dsp_time_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dsp_time_set &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_mem_time
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_datetime
</UL>

<P><STRONG><a name="[234]"></a>dsp_trubi_no</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, dsp.o(i.dsp_trubi_no))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dsp_trubi_no &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_store
</UL>

<P><STRONG><a name="[243]"></a>dsp_unit</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, dsp.o(i.dsp_unit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dsp_unit &rArr; LCDbmpxx &rArr; prt_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_setting
</UL>

<P><STRONG><a name="[244]"></a>enter_mem_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dsp.o(i.enter_mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enter_mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_seqno_dgt
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
</UL>

<P><STRONG><a name="[246]"></a>enter_qc_set</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, dsp.o(i.enter_qc_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = enter_qc_set &rArr; store_vars &rArr; write_id_chksum &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write24w
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_vars
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_strip_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_wait
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set_strip
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set
</UL>

<P><STRONG><a name="[248]"></a>enter_test_set</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, dsp.o(i.enter_test_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = enter_test_set &rArr; store_vars &rArr; write_id_chksum &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write24w
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_vars
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_seqno
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_strip_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_wait
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_turbi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_strip
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_color
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set
</UL>

<P><STRONG><a name="[249]"></a>eraseFR</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, resm.o(i.eraseFR))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDInit
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stat
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFR4K
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blankFR4K
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFR4k
</UL>

<P><STRONG><a name="[24a]"></a>eraseFR4K</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, resm.o(i.eraseFR4K))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eraseFR4K &rArr; sendWRSR &rArr; sendFR &rArr; send_ck
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendWRSR
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFR
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_FR
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFR
</UL>

<P><STRONG><a name="[228]"></a>erase_box0</STRONG> (Thumb, 128 bytes, Stack size 36 bytes, lcd.o(i.erase_box0))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = erase_box0
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system_check
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_strip_set
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_oper_name
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_set
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_measure
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_digit_pr
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_change_pr_set
</UL>

<P><STRONG><a name="[e7]"></a>f_close</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileFromUSB
</UL>

<P><STRONG><a name="[15b]"></a>f_mount</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
</UL>

<P><STRONG><a name="[e6]"></a>f_open</STRONG> (Thumb, 378 bytes, Stack size 592 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileFromUSB
</UL>

<P><STRONG><a name="[b0]"></a>f_opendir</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareUSB
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreUSB
</UL>

<P><STRONG><a name="[e8]"></a>f_read</STRONG> (Thumb, 494 bytes, Stack size 64 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileFromUSB
</UL>

<P><STRONG><a name="[b1]"></a>f_readdir</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareUSB
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreUSB
</UL>

<P><STRONG><a name="[24f]"></a>f_sync</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1bf]"></a>fill_space</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, com.o(i.fill_space))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_new
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_operid_set
</UL>

<P><STRONG><a name="[f8]"></a>fill_space2</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, com.o(i.fill_space2))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send720
</UL>

<P><STRONG><a name="[20d]"></a>fill_zero</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dsp.o(i.fill_zero))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_time
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_date
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_los_table
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_time_set
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_seqno
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set_seqno
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_memory
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_sid
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_oid
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_los_table_store
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_datetime
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_date_set
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_time_set
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_new
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_datetime
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_date_set
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_seqno2dgtstr
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_sample8
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_oper8
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_number8
</UL>

<P><STRONG><a name="[25b]"></a>flash_decode</STRONG> (Thumb, 574 bytes, Stack size 8 bytes, flash.o(i.flash_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = flash_decode &rArr; store_font &rArr; write_bmp &rArr; FMC_NAND_WriteSmallPage &rArr; FMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_font
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_bmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_decode
</UL>

<P><STRONG><a name="[25e]"></a>fnb_update</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, sysadj.o(i.fnb_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1644<LI>Call Chain = fnb_update &rArr; ExploreUSB &rArr; ReadFileFromUSB &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_FONT
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_BMP_second
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_BMP
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg24
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg16
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_screen_box
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HS_Process
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFatReady
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreUSB
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bmp
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
</UL>

<P><STRONG><a name="[1e4]"></a>get_fat</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[254]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_msc_fatfs.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1b1]"></a>get_max_stripno</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, eep.o(i.get_max_stripno))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_max_stripno &rArr; prt_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_strip_info
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_strip
</UL>

<P><STRONG><a name="[2ac]"></a>get_max_wide</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, flash.o(i.get_max_wide))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_font64
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_font56
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_font48
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_font40
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_font32
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_font24
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_font16
</UL>

<P><STRONG><a name="[266]"></a>get_pad_data</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, meas.o(i.get_pad_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_pad_data &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
</UL>

<P><STRONG><a name="[22c]"></a>get_strip_name</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, eep.o(i.get_strip_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_strip_name
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_strip_set
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_result
</UL>

<P><STRONG><a name="[267]"></a>get_white_high</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, eep.o(i.get_white_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_white_high &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ref_data
</UL>

<P><STRONG><a name="[2d6]"></a>getcmd1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(i.getcmd1))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system_check
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_meas_adj
</UL>

<P><STRONG><a name="[2ce]"></a>getcmd2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(i.getcmd2))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_strip
</UL>

<P><STRONG><a name="[2bf]"></a>getcmd3</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(i.getcmd3))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_decode
</UL>

<P><STRONG><a name="[2c1]"></a>getcmd5</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(i.getcmd5))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_decode
</UL>

<P><STRONG><a name="[2a1]"></a>hexasc2bin_1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd.o(i.hexasc2bin_1))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_result
</UL>

<P><STRONG><a name="[268]"></a>initEEP</STRONG> (Thumb, 602 bytes, Stack size 16 bytes, eep.o(i.initEEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = initEEP &rArr; chk_ini_printform &rArr; restore_sflash &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFR4k
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read24w
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_intflash
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ref_data
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_intflash
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_sflash
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eep_all
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer3
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_id
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_sys_id
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_sum_int_buff
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_sum_ext_buff
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_strip
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_printform
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_position
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_para
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
</UL>

<P><STRONG><a name="[26e]"></a>initRTC</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, resm.o(i.initRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = initRTC &rArr; readAllRTC &rArr; readRTC &rArr; sendRTC &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDInit
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRTC
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRTC
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2bin2
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAllRTC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
</UL>

<P><STRONG><a name="[273]"></a>init_ADC</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tm_adc.o(i.init_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = init_ADC &rArr; TM_ADC_Init &rArr; TM_ADC_InitADC &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
</UL>

<P><STRONG><a name="[274]"></a>init_BUZZ</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tm_adc.o(i.init_BUZZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init_BUZZ &rArr; TM4_PWM_Init &rArr; TIM_OC2Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM4_TIMER_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM4_PWM_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM4_LEDS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
</UL>

<P><STRONG><a name="[276]"></a>init_RAM</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, para.o(i.init_RAM))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
</UL>

<P><STRONG><a name="[2e8]"></a>init_qc_set</STRONG> (Thumb, 406 bytes, Stack size 0 bytes, dsp.o(i.init_qc_set))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_measure
</UL>

<P><STRONG><a name="[275]"></a>init_ststem</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, main.o(i.init_ststem))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = init_ststem &rArr; initEEP &rArr; chk_ini_printform &rArr; restore_sflash &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAllRTC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_FONT
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_BMP_second
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_BMP
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_RAM
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_BUZZ
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADC
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRTC
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM4_LEDS_port
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetUsec
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Check
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSW_Read
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSW_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e7]"></a>init_test_set</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, dsp.o(i.init_test_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_test_set
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_measure
</UL>

<P><STRONG><a name="[1f2]"></a>kdelay</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, usart.o(i.kdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = kdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_first
</UL>

<P><STRONG><a name="[1bb]"></a>key_buzzer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart.o(i.key_buzzer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_buzzer
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bmp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_index
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_loop
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_unit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_time_set
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_wait
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_turbi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_strip
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_color
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_system_chk
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_sysset
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_strip_set
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_setting
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_wait
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set_strip
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_set
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_new
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_view
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_delete
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_measure
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_serial
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_image
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_fw
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_font
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_cali
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_home
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_error
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_digit_pr
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_datetime
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_date_set
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_change_pr_set
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_QC
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_version_read
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_userid_set
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_time_write
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_time_read
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sys_info
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sys_id_set
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_strip_no_write
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_strip_no_read
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_strip_info_write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_strip_info_read
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_position_write
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_position_read
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_pform_write
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_pform_read
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_para_write
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_para_read
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_operid_set
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_meas_result
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_full_raw_data
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer3
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer2
</UL>

<P><STRONG><a name="[1a9]"></a>key_buzzer2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, eep.o(i.key_buzzer2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = key_buzzer2 &rArr; key_buzzer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_strip
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_printform
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_position
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_para
</UL>

<P><STRONG><a name="[26a]"></a>key_buzzer3</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, eep.o(i.key_buzzer3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = key_buzzer3 &rArr; key_buzzer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
</UL>

<P><STRONG><a name="[2d4]"></a>key_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, touch.o(i.key_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
</UL>

<P><STRONG><a name="[278]"></a>key_decode</STRONG> (Thumb, 552 bytes, Stack size 8 bytes, touch.o(i.key_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1660<LI>Call Chain = key_decode &rArr; tch_maintanence &rArr; fnb_update &rArr; ExploreUSB &rArr; ReadFileFromUSB &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_unit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_time_set
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_turbi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_strip
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_color
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_system_chk
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_sysset
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_strip_set
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_setting
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set_strip
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_set
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_new
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_view
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_delete
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_measure
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_serial
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_image
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_fw
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_font
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_cali
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_home
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_digit_pr
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_datetime
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_date_set
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_change_pr_set
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_QC
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_read
</UL>

<P><STRONG><a name="[90]"></a>main</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668<LI>Call Chain = main &rArr; tch_read &rArr; key_decode &rArr; tch_maintanence &rArr; fnb_update &rArr; ExploreUSB &rArr; ReadFileFromUSB &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bmp
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_read
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_decode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_index
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_table
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_com_dly
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FS_Process
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FS_Init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_loop
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_strip
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_loop
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_first
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_barcoard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[299]"></a>make_index</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, eep.o(i.make_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = make_index &rArr; out_line_32 &rArr; out_text_32e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_32
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_result
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a0]"></a>make_result</STRONG> (Thumb, 364 bytes, Stack size 8 bytes, meas.o(i.make_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = make_result &rArr; asc2bin4
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexasc2bin_1
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asc2bin4
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_view
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_QC
</UL>

<P><STRONG><a name="[221]"></a>make_seqno2dgtstr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dsp.o(i.make_seqno2dgtstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = make_seqno2dgtstr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_store
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_qc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_sample8
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_oper8
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_number8
</UL>

<P><STRONG><a name="[245]"></a>make_seqno_dgt</STRONG> (Thumb, 486 bytes, Stack size 0 bytes, dsp.o(i.make_seqno_dgt))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_mem_set
</UL>

<P><STRONG><a name="[29d]"></a>motor_loop</STRONG> (Thumb, 414 bytes, Stack size 8 bytes, main.o(i.motor_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = motor_loop &rArr; run_measure &rArr; dsp_result &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_strip
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_strip
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_strip
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[264]"></a>move_BMP</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, flash.o(i.move_BMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = move_BMP &rArr; FMC_NAND_ReadSmallPage &rArr; FMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadSmallPage
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnb_update
</UL>

<P><STRONG><a name="[265]"></a>move_BMP_second</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, flash.o(i.move_BMP_second))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = move_BMP_second &rArr; FMC_NAND_ReadSmallPage &rArr; FMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadSmallPage
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnb_update
</UL>

<P><STRONG><a name="[263]"></a>move_FONT</STRONG> (Thumb, 608 bytes, Stack size 48 bytes, flash.o(i.move_FONT))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = move_FONT &rArr; FMC_NAND_ReadSmallPage &rArr; FMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadSmallPage
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_font64
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_font56
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_font48
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_font40
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_font32
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_font24
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_font16
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnb_update
</UL>

<P><STRONG><a name="[2a5]"></a>move_font16</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, flash.o(i.move_font16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = move_font16
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_wide
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_FONT
</UL>

<P><STRONG><a name="[2a6]"></a>move_font24</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, flash.o(i.move_font24))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = move_font24
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_wide
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_FONT
</UL>

<P><STRONG><a name="[2a7]"></a>move_font32</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, flash.o(i.move_font32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = move_font32
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_wide
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_FONT
</UL>

<P><STRONG><a name="[2a8]"></a>move_font40</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, flash.o(i.move_font40))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = move_font40
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_wide
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_FONT
</UL>

<P><STRONG><a name="[2a9]"></a>move_font48</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, flash.o(i.move_font48))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = move_font48
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_wide
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_FONT
</UL>

<P><STRONG><a name="[2aa]"></a>move_font56</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, flash.o(i.move_font56))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = move_font56
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_wide
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_FONT
</UL>

<P><STRONG><a name="[2ab]"></a>move_font64</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, flash.o(i.move_font64))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = move_font64
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_wide
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_FONT
</UL>

<P><STRONG><a name="[1aa]"></a>move_int2ext</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, eep.o(i.move_int2ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = move_int2ext
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_strip
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_printform
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_position
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_para
</UL>

<P><STRONG><a name="[1ab]"></a>move_parameter</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, eep.o(i.move_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = move_parameter &rArr; prt_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asc2dec
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_para
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_para
</UL>

<P><STRONG><a name="[1ad]"></a>move_position</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, eep.o(i.move_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = move_position &rArr; prt_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asc2dec
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_position
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_position
</UL>

<P><STRONG><a name="[1af]"></a>move_printform</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, eep.o(i.move_printform))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = move_printform &rArr; prt_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_pform_write
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_printform
</UL>

<P><STRONG><a name="[2a3]"></a>move_strip</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, resm.o(i.move_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = move_strip
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_loop
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system_check
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
</UL>

<P><STRONG><a name="[1b2]"></a>move_strip_info</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, eep.o(i.move_strip_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = move_strip_info &rArr; prt_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asc2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_set
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_qc_set
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_strip_set
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_strip_info
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_strip
</UL>

<P><STRONG><a name="[260]"></a>msg16</STRONG> (Thumb, 50 bytes, Stack size 296 bytes, lcd.o(i.msg16))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = msg16 &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnb_update
</UL>

<P><STRONG><a name="[b4]"></a>msg24</STRONG> (Thumb, 50 bytes, Stack size 296 bytes, lcd.o(i.msg24))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = msg24 &rArr; out_line_24 &rArr; out_text_24e
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_24
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bmp
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnb_update
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreUSB
</UL>

<P><STRONG><a name="[2b0]"></a>out_check</STRONG> (Thumb, 510 bytes, Stack size 40 bytes, sysadj.o(i.out_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = out_check &rArr; out_line_24 &rArr; out_text_24e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_24
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx2
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_print_time
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf2
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
</UL>

<P><STRONG><a name="[1a1]"></a>out_line_16</STRONG> (Thumb, 58 bytes, Stack size 28 bytes, lcd.o(i.out_line_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_text_16e
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_time
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_date
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_los_table
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_loop
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_barcoard
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system_check
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_time_set
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_turbi
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_strip
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_sid
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_seqno
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_color
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_system_check
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_strip_set
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_store
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set_seqno
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set_lot
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_oper_set
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_oper_name
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_memory
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_sid
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_seqno
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_oid
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_line8
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_los_table_store
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_datetime
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_date_set
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_time_set
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_set
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_datetime
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_date_set
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg16
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_trubi_no
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_qc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_sample8
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_oper8
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_number8
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_item_title
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_item_tb
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_color_no
</UL>

<P><STRONG><a name="[20b]"></a>out_line_24</STRONG> (Thumb, 58 bytes, Stack size 28 bytes, lcd.o(i.out_line_24))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = out_line_24 &rArr; out_text_24e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_text_24e
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bmp
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg24
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_serial_data
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_oper_info
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_measure
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_change_PR
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_measure
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_digit_pr
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_check
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_pr_name
</UL>

<P><STRONG><a name="[215]"></a>out_line_32</STRONG> (Thumb, 58 bytes, Stack size 28 bytes, lcd.o(i.out_line_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = out_line_32 &rArr; out_text_32e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_text_32e
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_index
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_fw_update
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_delete
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_fw
</UL>

<P><STRONG><a name="[213]"></a>out_line_48</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, lcd.o(i.out_line_48))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = out_line_48 &rArr; out_text_48e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_text_48e
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_fw_update
</UL>

<P><STRONG><a name="[2b4]"></a>out_text_16e</STRONG> (Thumb, 184 bytes, Stack size 100 bytes, lcd.o(i.out_text_16e))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = out_text_16e
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
</UL>

<P><STRONG><a name="[2b5]"></a>out_text_24e</STRONG> (Thumb, 202 bytes, Stack size 132 bytes, lcd.o(i.out_text_24e))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = out_text_24e
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_24
</UL>

<P><STRONG><a name="[2b6]"></a>out_text_32e</STRONG> (Thumb, 204 bytes, Stack size 164 bytes, lcd.o(i.out_text_32e))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = out_text_32e
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_32
</UL>

<P><STRONG><a name="[2b7]"></a>out_text_48e</STRONG> (Thumb, 366 bytes, Stack size 436 bytes, lcd.o(i.out_text_48e))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = out_text_48e
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_48
</UL>

<P><STRONG><a name="[231]"></a>out_time</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, resm.o(i.out_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = out_time &rArr; readAllRTC &rArr; readRTC &rArr; sendRTC &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_copy
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAllRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_store
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_qc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result
</UL>

<P><STRONG><a name="[2b9]"></a>print_result</STRONG> (Thumb, 1742 bytes, Stack size 16 bytes, meas.o(i.print_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = print_result &rArr; print_save &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd2
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf2
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_save
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcdasc4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_view
</UL>

<P><STRONG><a name="[2ba]"></a>print_save</STRONG> (Thumb, 84 bytes, Stack size 96 bytes, meas.o(i.print_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = print_save &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_result
</UL>

<P><STRONG><a name="[2b1]"></a>printf2</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, usart.o(i.printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = printf2 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Send2
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_result
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_check
</UL>

<P><STRONG><a name="[2bd]"></a>printf3</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, usart.o(i.printf3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = printf3 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Send3
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system_check
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_view
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_para
</UL>

<P><STRONG><a name="[ae]"></a>printf5</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, usart.o(i.printf5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Send3
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFR
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_read
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_FONT
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_BMP_second
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_BMP
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_index
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRTC
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_com_dly
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FS_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Check
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSW_Read
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_loop
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_strip
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_loop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_barcoard
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_vars
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pr_buff
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_result
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system_check
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnb_update
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_qc_set
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_oper_new
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_index
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correction_curve
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result_store
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HS_Init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_unit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_time_set
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_wait
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_turbi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_strip
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_system_chk
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_sysset
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_strip_set
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_setting
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_wait
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set_strip
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_set
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_view
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_delete
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_measure
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_serial
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_image
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_fw
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_font
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_cali
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_digit_pr
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_datetime
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_date_set
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_change_pr_set
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_QC
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_test_sid
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_UnrecoveredError
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_SerialNum_String
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Product_String
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_OverCurrentDetected
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Manufacturer_String
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_EnumerationDone
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Device_DescAvailable
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceSpeedDetected
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceNotSupported
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceDisconnected
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceAttached
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Configuration_DescAvailable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_KEYBRD_ProcessData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_KEYBRD_Init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_USR_UnrecoveredError
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_USR_SerialNum_String
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_USR_Product_String
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_USR_OverCurrentDetected
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_USR_Manufacturer_String
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_USR_EnumerationDone
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_USR_Device_DescAvailable
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_USR_DeviceSpeedDetected
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_USR_DeviceNotSupported
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_USR_DeviceDisconnected
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_USR_DeviceAttached
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_USR_Configuration_DescAvailable
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_vars
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_strip_no
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_userid
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sysid
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_strip_info
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_position
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_para
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_strip
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_position
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_para
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_version_read
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_time_write
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_time_read
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sys_info
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_strip_no_write
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_strip_info_write
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_position_read
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_pform_write
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_pform_read
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_para_write
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_operid_set
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_msg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_meas_result
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_reference_rgb
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ref_data
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareUSB
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreUSB
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_meas_adj
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_check
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_result
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_index
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rawdata
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_albumin
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pad_data
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ratio2
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_trubi_no
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_color_no
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eep_all
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_white_high
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_sys_id
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bmp
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_font
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_bmp_usb
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_bmp
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_format
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decode
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileFromUSB
</UL>

<P><STRONG><a name="[29f]"></a>prog_decode</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, flash.o(i.prog_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = prog_decode &rArr; system_decode &rArr; com_userid_set &rArr; store_userid &rArr; store_vars &rArr; write_id_chksum &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcmd5
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcmd3
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_decode
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c2]"></a>prog_update</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sysadj.o(i.prog_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612<LI>Call Chain = prog_update &rArr; FirmwareUSB &rArr; ReadFileFromUSB &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HS_Process
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFatReady
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareUSB
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_fw
</UL>

<P><STRONG><a name="[de]"></a>prt_msg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usart.o(i.prt_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prt_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx5
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sflash
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_seqno
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_strip_info
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_turbi
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_strip
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_color
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_record
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_QC
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_printform
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_position
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_parameter
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_stripno
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_result
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_intflash
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_seqno
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eep_all
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_id
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_sum_int_buff
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_sum_ext_buff
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_strip
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_printform
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_position
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_para
</UL>

<P><STRONG><a name="[2a2]"></a>push_strip</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, resm.o(i.push_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = push_strip
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_loop
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system_check
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
</UL>

<P><STRONG><a name="[1df]"></a>put_albumin</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, meas.o(i.put_albumin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = put_albumin &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result_store
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result
</UL>

<P><STRONG><a name="[1dc]"></a>put_arb</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, meas.o(i.put_arb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = put_arb
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result_store
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result
</UL>

<P><STRONG><a name="[1e5]"></a>put_fat</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[1dd]"></a>put_result1</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, meas.o(i.put_result1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = put_result1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result_store
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result
</UL>

<P><STRONG><a name="[1de]"></a>put_result2</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, meas.o(i.put_result2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = put_result2
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result_store
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result
</UL>

<P><STRONG><a name="[2c7]"></a>read24</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eep.o(i.read24))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_id_chksum
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eep_all
</UL>

<P><STRONG><a name="[269]"></a>read24w</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eep.o(i.read24w))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_sysset
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_datetime
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eep_all
</UL>

<P><STRONG><a name="[272]"></a>readAllRTC</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, resm.o(i.readAllRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = readAllRTC &rArr; readRTC &rArr; sendRTC &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRTC
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2bin2
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_time
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTime
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRTC
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_loop
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_format
</UL>

<P><STRONG><a name="[19b]"></a>readFR4k</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, resm.o(i.readFR4k))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDInit
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFR
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmpFR4k
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blankFR4K
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_record
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ref_data
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_result
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_seqno
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_result
</UL>

<P><STRONG><a name="[270]"></a>readRTC</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, resm.o(i.readRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = readRTC &rArr; sendRTC &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendRTC
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataRTC
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1302
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTime
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAllRTC
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRTC
</UL>

<P><STRONG><a name="[2c5]"></a>readTime</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, resm.o(i.readTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = readTime &rArr; dsp_time &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_copy
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_time
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_date
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRTC
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRTC
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd2
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2bin2
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAllRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_loop
</UL>

<P><STRONG><a name="[26b]"></a>read_eep_all</STRONG> (Thumb, 794 bytes, Stack size 16 bytes, eep.o(i.read_eep_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = read_eep_all &rArr; write_id_chksum &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_id_chksum
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write24w
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baud_usb
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baud_rs232
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read24w
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_user_id
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_seqno
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read24
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
</UL>

<P><STRONG><a name="[277]"></a>read_jedec</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, resm.o(i.read_jedec))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_jedec &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDInit
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFR
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_FR
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ststem
</UL>

<P><STRONG><a name="[26d]"></a>read_ref_data</STRONG> (Thumb, 452 bytes, Stack size 16 bytes, eep.o(i.read_ref_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_ref_data &rArr; get_white_high &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFR4k
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_white_high
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
</UL>

<P><STRONG><a name="[2cc]"></a>read_result</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, eep.o(i.read_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = read_result &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFR4k
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_result
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_view
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_QC
</UL>

<P><STRONG><a name="[2cb]"></a>read_seqno</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, eep.o(i.read_seqno))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = read_seqno &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFR4k
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eep_all
</UL>

<P><STRONG><a name="[24b]"></a>read_stat</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, resm.o(i.read_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_stat &rArr; sendFR &rArr; send_ck
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFR
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_FR
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFR256
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFR
</UL>

<P><STRONG><a name="[29c]"></a>read_strip</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, main.o(i.read_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_strip &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcmd2
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
</UL>

<P><STRONG><a name="[2cd]"></a>restore_result</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, eep.o(i.restore_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = restore_result &rArr; bin2bcdasc4
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcdasc4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result
</UL>

<P><STRONG><a name="[1a8]"></a>restore_sflash</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, eep.o(i.restore_sflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = restore_sflash &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sflash
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_strip
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_printform
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_position
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_ini_para
</UL>

<P><STRONG><a name="[2cf]"></a>run_calibration</STRONG> (Thumb, 788 bytes, Stack size 16 bytes, sysadj.o(i.run_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = run_calibration &rArr; out_check &rArr; out_line_24 &rArr; out_text_24e
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_strip
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_strip
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_strip
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_24
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_strip_info
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_base_bar
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correction_curve
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_clear
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_reference_rgb
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ref_data
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_meas_adj
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_check
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_meas_step
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;span_curve
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
</UL>

<P><STRONG><a name="[c2]"></a>run_format</STRONG> (Thumb, 448 bytes, Stack size 48 bytes, flash.o(i.run_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = run_format &rArr; readAllRTC &rArr; readRTC &rArr; sendRTC &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAllRTC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx5
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WriteSpareArea
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WriteSmallPage
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadSpareArea
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadSmallPage
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_EraseBlock
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Check
</UL>

<P><STRONG><a name="[2d1]"></a>run_meas_adj</STRONG> (Thumb, 450 bytes, Stack size 32 bytes, sysadj.o(i.run_meas_adj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = run_meas_adj &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd1
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcmd1
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
</UL>

<P><STRONG><a name="[2a4]"></a>run_measure</STRONG> (Thumb, 1444 bytes, Stack size 32 bytes, meas.o(i.run_measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = run_measure &rArr; dsp_result &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_los_table
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_vars
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_seqno
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_result
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_result
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correction_curve
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send720
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_clear
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_result
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_meas_step
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd1
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_result
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcmd1
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_clear
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_user_id
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_index
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;span_curve
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rawdata
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pad_data
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ratio2
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreseSampleID
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_strip_name
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_qc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_los_test
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_loop
</UL>

<P><STRONG><a name="[2dc]"></a>run_system_check</STRONG> (Thumb, 708 bytes, Stack size 16 bytes, sysadj.o(i.run_system_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = run_system_check &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_strip
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_strip
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf3
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_box0
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd1
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcmd1
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_system_chk
</UL>

<P><STRONG><a name="[2d5]"></a>savcmd1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(i.savcmd1))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system_check
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_meas_adj
</UL>

<P><STRONG><a name="[2bb]"></a>savcmd2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(i.savcmd2))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_result
</UL>

<P><STRONG><a name="[f9]"></a>savcmd3</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usart.o(i.savcmd3))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_result
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send720
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_strip
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_position
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_para
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_version_read
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_userid_set
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_time_write
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_time_read
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sys_info
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sys_id_set
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_strip_no_write
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_strip_no_read
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_strip_info_write
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_position_write
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_pform_write
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_pform_read
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_para_write
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_operid_set
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_meas_result
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_full_raw_data
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_meas_step
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rawdata
</UL>

<P><STRONG><a name="[1e0]"></a>savcmd5</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(i.savcmd5))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result_store
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result
</UL>

<P><STRONG><a name="[1d7]"></a>sendAll_RTC</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, resm.o(i.sendAll_RTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sendAll_RTC &rArr; writeRTC &rArr; sendRTC &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRTC
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_datetime
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_time_write
</UL>

<P><STRONG><a name="[24e]"></a>sendFR</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, resm.o(i.sendFR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sendFR &rArr; send_ck
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ck
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFR256
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendWRSR
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stat
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFR4k
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFR4K
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec
</UL>

<P><STRONG><a name="[2c4]"></a>sendRTC</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, resm.o(i.sendRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sendRTC &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_clk02
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1302
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRTC
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRTC
</UL>

<P><STRONG><a name="[24c]"></a>sendWRSR</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, resm.o(i.sendWRSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sendWRSR &rArr; sendFR &rArr; send_ck
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFR
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_FR
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFR4K
</UL>

<P><STRONG><a name="[2dd]"></a>send_ck</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, resm.o(i.send_ck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_ck
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFR
</UL>

<P><STRONG><a name="[1ea]"></a>send_clk02</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, resm.o(i.send_clk02))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_clk02
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1302
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendRTC
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataRTC
</UL>

<P><STRONG><a name="[2d0]"></a>send_meas_step</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, com.o(i.send_meas_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_meas_step
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
</UL>

<P><STRONG><a name="[1c1]"></a>send_para</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, com.o(i.send_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = send_para &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx3
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_para_read
</UL>

<P><STRONG><a name="[1c9]"></a>send_position</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, com.o(i.send_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = send_position &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx3
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_position_read
</UL>

<P><STRONG><a name="[2d7]"></a>send_rawdata</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, meas.o(i.send_rawdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = send_rawdata &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
</UL>

<P><STRONG><a name="[2da]"></a>send_result</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, meas.o(i.send_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = send_result &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx3
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_view
</UL>

<P><STRONG><a name="[1cd]"></a>send_strip</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, com.o(i.send_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = send_strip &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx3
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savcmd3
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_strip_info_read
</UL>

<P><STRONG><a name="[2ca]"></a>set_baud_rs232</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, usart.o(i.set_baud_rs232))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = set_baud_rs232 &rArr; STM_EVAL_COMInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_sysset
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eep_all
</UL>

<P><STRONG><a name="[2c9]"></a>set_baud_usb</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, usart.o(i.set_baud_usb))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = set_baud_usb &rArr; STM_EVAL_COMInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_COMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_sysset
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eep_all
</UL>

<P><STRONG><a name="[1ee]"></a>set_default_RGB</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sysadj.o(i.set_default_RGB))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_id
</UL>

<P><STRONG><a name="[2b3]"></a>set_print_time</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, sysadj.o(i.set_print_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = set_print_time &rArr; bin2bcdasc4
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcdasc4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_check
</UL>

<P><STRONG><a name="[2d2]"></a>span_curve</STRONG> (Thumb, 188 bytes, Stack size 12 bytes, meas.o(i.span_curve))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = span_curve
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
</UL>

<P><STRONG><a name="[fb]"></a>stepa_loop</STRONG> (Thumb, 380 bytes, Stack size 8 bytes, usart.o(i.stepa_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stepa_loop
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>stepb_loop</STRONG> (Thumb, 376 bytes, Stack size 8 bytes, usart.o(i.stepb_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stepb_loop
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[25c]"></a>store_bmp</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, flash.o(i.store_bmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = store_bmp &rArr; write_bmp &rArr; FMC_NAND_WriteSmallPage &rArr; FMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx5
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_bmp_usb
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decode
</UL>

<P><STRONG><a name="[b6]"></a>store_bmp_usb</STRONG> (Thumb, 388 bytes, Stack size 8 bytes, flash.o(i.store_bmp_usb))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = store_bmp_usb &rArr; store_font &rArr; write_bmp &rArr; FMC_NAND_WriteSmallPage &rArr; FMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_font
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_bmp
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreUSB
</UL>

<P><STRONG><a name="[25d]"></a>store_font</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, flash.o(i.store_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = store_font &rArr; write_bmp &rArr; FMC_NAND_WriteSmallPage &rArr; FMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tx5
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_bmp_usb
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decode
</UL>

<P><STRONG><a name="[2df]"></a>store_oper_buff</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, eep.o(i.store_oper_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = store_oper_buff &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_vars
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write24
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sflash
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_intflash
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_set
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_new
</UL>

<P><STRONG><a name="[1c3]"></a>store_para</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, com.o(i.store_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = store_para &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf3
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_vars
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sflash
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_parameter
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_intflash
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pr_buff
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_para_write
</UL>

<P><STRONG><a name="[1cb]"></a>store_position</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, com.o(i.store_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = store_position &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_vars
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sflash
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_position
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_intflash
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_position_write
</UL>

<P><STRONG><a name="[2e1]"></a>store_pr_buff</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, eep.o(i.store_pr_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = store_pr_buff &rArr; store_para &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_para
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_digit_pr
</UL>

<P><STRONG><a name="[2d3]"></a>store_reference_rgb</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, eep.o(i.store_reference_rgb))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = store_reference_rgb &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFR4k
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
</UL>

<P><STRONG><a name="[2d8]"></a>store_result</STRONG> (Thumb, 818 bytes, Stack size 24 bytes, eep.o(i.store_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = store_result &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFR4k
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sflash
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_strip_name
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcdasc4
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2hexasc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
</UL>

<P><STRONG><a name="[1ed]"></a>store_seqno</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, eep.o(i.store_seqno))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = store_seqno &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFR4k
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_set
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_delete
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_userid
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_id
</UL>

<P><STRONG><a name="[1c6]"></a>store_sflash</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, eep.o(i.store_sflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sflash
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_id_chksum
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_oper_buff
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sysid
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_strip_info
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_position
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_para
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_pform_write
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_sflash
</UL>

<P><STRONG><a name="[1cf]"></a>store_strip_info</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, com.o(i.store_strip_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = store_strip_info &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_strip_info
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_vars
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sflash
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_stripno
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_intflash
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_strip_info_write
</UL>

<P><STRONG><a name="[1d2]"></a>store_strip_no</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, eep.o(i.store_strip_no))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = store_strip_no &rArr; write_id_chksum &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_id_chksum
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write24w
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_vars
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_intflash
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_strip_no_write
</UL>

<P><STRONG><a name="[1b4]"></a>store_sysid</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, com.o(i.store_sysid))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = store_sysid &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_vars
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write24
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sflash
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_intflash
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sys_id_set
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_sys_id
</UL>

<P><STRONG><a name="[1d9]"></a>store_userid</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, com.o(i.store_userid))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = store_userid &rArr; store_vars &rArr; write_id_chksum &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_vars
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_seqno
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_userid_set
</UL>

<P><STRONG><a name="[247]"></a>store_vars</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, eep.o(i.store_vars))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = store_vars &rArr; write_id_chksum &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_id_chksum
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write24w
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_vars
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_intflash
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_measure
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_set
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_qc_set
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_unit
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_sysset
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_strip_set
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_delete
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_measure
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_datetime
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_userid
</UL>

<P><STRONG><a name="[2c0]"></a>system_decode</STRONG> (Thumb, 396 bytes, Stack size 8 bytes, com.o(i.system_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = system_decode &rArr; com_userid_set &rArr; store_userid &rArr; store_vars &rArr; write_id_chksum &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_version_read
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_userid_set
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_time_write
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_time_read
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sys_info
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sys_id_set
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_sys_check
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_strip_no_write
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_strip_no_read
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_strip_info_write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_strip_info_read
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_position_write
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_position_read
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_pform_write
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_pform_read
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_para_write
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_para_read
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_operid_set
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_meas_result
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_full_raw_data
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_decode
</UL>

<P><STRONG><a name="[284]"></a>tch_QC</STRONG> (Thumb, 1626 bytes, Stack size 8 bytes, touch.o(i.tch_QC))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tch_QC &rArr; dsp_result_store &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_time
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_date
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_los_table
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_result
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_strip
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_store
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_measure
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result_store
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[28e]"></a>tch_change_pr_set</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, touch.o(i.tch_change_pr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tch_change_pr_set &rArr; dsp_change_PR &rArr; type_pr_name &rArr; out_line_24 &rArr; out_text_24e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_box0
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_setting
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_change_PR
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[2e5]"></a>tch_check</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, touch.o(i.tch_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_unit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_time_set
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_wait
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_turbi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_strip
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_color
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_system_chk
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_sysset
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_strip_set
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_setting
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_wait
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set_strip
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_set
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_new
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_memory
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_view
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_set
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_delete
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_measure
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_serial
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_image
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_fw
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_font
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_cali
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_home
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_digit_pr
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_datetime
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_date_set
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_change_pr_set
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_QC
</UL>

<P><STRONG><a name="[289]"></a>tch_date_set</STRONG> (Thumb, 1404 bytes, Stack size 16 bytes, touch.o(i.tch_date_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tch_date_set &rArr; dsp_date &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_date
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_datetime
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_mem_date
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dayInMonth
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[288]"></a>tch_datetime</STRONG> (Thumb, 2546 bytes, Stack size 16 bytes, touch.o(i.tch_datetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = tch_datetime &rArr; store_vars &rArr; write_id_chksum &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAll_RTC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write24w
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_vars
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read24w
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_time_set
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_setting
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_date_set
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[28f]"></a>tch_digit_pr</STRONG> (Thumb, 490 bytes, Stack size 8 bytes, touch.o(i.tch_digit_pr))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = tch_digit_pr &rArr; store_pr_buff &rArr; store_para &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pr_buff
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_24
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_box0
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_change_PR
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_base_bar
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[185]"></a>tch_error</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, touch.o(i.tch_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tch_error &rArr; key_buzzer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_wait
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_turbi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_strip
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_color
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_wait
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set_strip
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_oper_new
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_test_sid
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_qc_lot
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_mem_sid
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_mem_seq
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_mem_oid
</UL>

<P><STRONG><a name="[279]"></a>tch_home</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, touch.o(i.tch_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tch_home &rArr; dsp_memory &rArr; dsp_mem_line8 &rArr; dsp_mem_sample8 &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_setting
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_memory
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_measure
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMemory
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[291]"></a>tch_maintanence</STRONG> (Thumb, 664 bytes, Stack size 8 bytes, touch.o(i.tch_maintanence))
<BR><BR>[Stack]<UL><LI>Max Depth = 1652<LI>Call Chain = tch_maintanence &rArr; fnb_update &rArr; ExploreUSB &rArr; ReadFileFromUSB &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_id_chksum
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write24w
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_calibration
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_24
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg24
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnb_update
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_sysset
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_serial_data
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_image_update
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_fw_update
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_font_update
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HS_Init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[292]"></a>tch_maintanence_cali</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, touch.o(i.tch_maintanence_cali))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tch_maintanence_cali &rArr; dsp_maintanence &rArr; dsp_base_bar &rArr; dsp_time &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_maintanence
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[296]"></a>tch_maintanence_font</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, touch.o(i.tch_maintanence_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tch_maintanence_font &rArr; dsp_maintanence &rArr; dsp_base_bar &rArr; dsp_time &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_maintanence
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[294]"></a>tch_maintanence_fw</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, touch.o(i.tch_maintanence_fw))
<BR><BR>[Stack]<UL><LI>Max Depth = 1620<LI>Call Chain = tch_maintanence_fw &rArr; prog_update &rArr; FirmwareUSB &rArr; ReadFileFromUSB &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prog_update
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_32
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_maintanence
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HS_Init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[295]"></a>tch_maintanence_image</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, touch.o(i.tch_maintanence_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tch_maintanence_image &rArr; dsp_maintanence &rArr; dsp_base_bar &rArr; dsp_time &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_maintanence
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[293]"></a>tch_maintanence_serial</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, touch.o(i.tch_maintanence_serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tch_maintanence_serial &rArr; dsp_serial_data &rArr; out_line_24 &rArr; out_text_24e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_id_chksum
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write24w
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_serial_data
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_maintanence
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[27e]"></a>tch_measure</STRONG> (Thumb, 542 bytes, Stack size 8 bytes, touch.o(i.tch_measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tch_measure &rArr; dsp_test &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_id_chksum
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write24w
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_vars
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_24
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_test_set
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_qc_set
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_box0
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_strip_set
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_oper_set
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[27d]"></a>tch_mem_delete</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, touch.o(i.tch_mem_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tch_mem_delete &rArr; out_line_32 &rArr; out_text_32e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sflash
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_vars
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_seqno
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_32
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_memory
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_record
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_index
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[27b]"></a>tch_mem_set</STRONG> (Thumb, 866 bytes, Stack size 8 bytes, touch.o(i.tch_mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tch_mem_set &rArr; dsp_memory &rArr; dsp_mem_line8 &rArr; dsp_mem_sample8 &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_mem_set
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_type_set
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_memory
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_sid
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_seqno
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set_oid
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_mem_sid
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_mem_seq
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_mem_oid
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_cursor_mem_set
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_mem_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMemory
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_mem_sid
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_mem_seq
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_mem_oid
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[27c]"></a>tch_mem_view</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, touch.o(i.tch_mem_view))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tch_mem_view &rArr; dsp_result_store &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_result
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf3
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_result
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_result
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_store
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_memory
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_los_table_store
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correction_curve
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result_store
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send720
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[27a]"></a>tch_memory</STRONG> (Thumb, 1230 bytes, Stack size 8 bytes, touch.o(i.tch_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = tch_memory &rArr; delete_memory_all &rArr;  tch_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_time
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_date
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_result
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf3
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_result
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_result
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_store
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_memory
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_set
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_mem_line8
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_mem_sid
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_mem_seq
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_mem_oid
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result_store
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_mem_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMemory
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLos12
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_memory_all
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[28c]"></a>tch_oper_new</STRONG> (Thumb, 1178 bytes, Stack size 48 bytes, touch.o(i.tch_oper_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tch_oper_new &rArr; dsp_oper_set &rArr; dsp_oper_info &rArr; out_line_24 &rArr; out_text_24e
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_oper_buff
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_space
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_oper_set
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_oper_name
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_error
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[28b]"></a>tch_oper_set</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, touch.o(i.tch_oper_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tch_oper_set &rArr; dsp_oper_set &rArr; dsp_oper_info &rArr; out_line_24 &rArr; out_text_24e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_oper_buff
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_box0
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_setting
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_oper_set
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_oper_new
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_oper_info
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_measure
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[285]"></a>tch_qc_set</STRONG> (Thumb, 888 bytes, Stack size 8 bytes, touch.o(i.tch_qc_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tch_qc_set &rArr; dsp_qc &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_qc_set
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_strip
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_qc_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_error
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_qc_lot
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[286]"></a>tch_qc_set_strip</STRONG> (Thumb, 942 bytes, Stack size 8 bytes, touch.o(i.tch_qc_set_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tch_qc_set_strip &rArr; tch_qc_wait &rArr; dsp_qc &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_qc_set
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_strip
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set_seqno
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set_negpos
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set_lot
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_qc_set
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_wait
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_error
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[2ed]"></a>tch_qc_wait</STRONG> (Thumb, 834 bytes, Stack size 8 bytes, touch.o(i.tch_qc_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tch_qc_wait &rArr; dsp_qc &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_qc_set
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_strip
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set_negpos
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set_lot
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc_set
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_qc
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_qc_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_error
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_qc_set_strip
</UL>

<P><STRONG><a name="[1f5]"></a>tch_read</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, touch.o(i.tch_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668<LI>Call Chain = tch_read &rArr; key_decode &rArr; tch_maintanence &rArr; fnb_update &rArr; ExploreUSB &rArr; ReadFileFromUSB &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_memory_all
</UL>

<P><STRONG><a name="[287]"></a>tch_setting</STRONG> (Thumb, 410 bytes, Stack size 16 bytes, touch.o(i.tch_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tch_setting &rArr; dsp_oper_set &rArr; dsp_oper_info &rArr; out_line_24 &rArr; out_text_24e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_unit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_system_check
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_sysset
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_oper_set
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_datetime
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_change_PR
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_base_bar
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[28d]"></a>tch_strip_set</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, touch.o(i.tch_strip_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = tch_strip_set &rArr; store_vars &rArr; write_id_chksum &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_vars
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_strip_info
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_strip_set
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_measure
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[298]"></a>tch_sysset</STRONG> (Thumb, 1224 bytes, Stack size 8 bytes, touch.o(i.tch_sysset))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = tch_sysset &rArr; store_vars &rArr; write_id_chksum &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write24w
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_vars
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baud_usb
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baud_rs232
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read24w
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_setting
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_maintanence
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[290]"></a>tch_system_chk</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, touch.o(i.tch_system_chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tch_system_chk &rArr; dsp_setting &rArr; dsp_base_bar &rArr; dsp_time &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system_check
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_setting
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[27f]"></a>tch_test</STRONG> (Thumb, 492 bytes, Stack size 8 bytes, touch.o(i.tch_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tch_test &rArr; dsp_result_store &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_time
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_date
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_los_table
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_result
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_result
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_turbi
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_strip
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_color
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_result_store
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_measure
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_test_sid
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result_store
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[280]"></a>tch_test_set</STRONG> (Thumb, 548 bytes, Stack size 8 bytes, touch.o(i.tch_test_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tch_test_set &rArr; dsp_test &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_set
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_turbi
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_strip
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_color
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_test_sid
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_test_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_error
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alpa_test_sid
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[282]"></a>tch_test_set_color</STRONG> (Thumb, 438 bytes, Stack size 8 bytes, touch.o(i.tch_test_set_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tch_test_set_color &rArr; tch_test_wait &rArr; dsp_test &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_set
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_turbi
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_color
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_test_sid
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_test_set
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_wait
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_error
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[281]"></a>tch_test_set_strip</STRONG> (Thumb, 562 bytes, Stack size 8 bytes, touch.o(i.tch_test_set_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tch_test_set_strip &rArr; tch_test_wait &rArr; dsp_test &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_set
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_turbi
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_strip
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_test_sid
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_test_set
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_wait
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_error
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[283]"></a>tch_test_set_turbi</STRONG> (Thumb, 470 bytes, Stack size 8 bytes, touch.o(i.tch_test_set_turbi))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tch_test_set_turbi &rArr; tch_test_wait &rArr; dsp_test &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_set
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_strip
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_color
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_test_sid
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_test_set
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_wait
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_error
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[2ef]"></a>tch_test_wait</STRONG> (Thumb, 432 bytes, Stack size 8 bytes, touch.o(i.tch_test_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tch_test_wait &rArr; dsp_test &rArr; dsp_item_tb &rArr; dsp_item_title &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_set
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_turbi
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_strip
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_sid
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set_color
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test_set
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_test
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_test_sid
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_test_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_error
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_turbi
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_strip
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_test_set_color
</UL>

<P><STRONG><a name="[28a]"></a>tch_time_set</STRONG> (Thumb, 1702 bytes, Stack size 16 bytes, touch.o(i.tch_time_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tch_time_set &rArr; dsp_datetime &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_16
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_zero
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_datetime
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_cursor_mem_time
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[297]"></a>tch_unit</STRONG> (Thumb, 388 bytes, Stack size 8 bytes, touch.o(i.tch_unit))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = tch_unit &rArr; store_vars &rArr; write_id_chksum &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_home
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDbmpxx
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write24w
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_vars
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_setting
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_decode
</UL>

<P><STRONG><a name="[2b8]"></a>time_copy</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, lcd.o(i.time_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = time_copy &rArr; bin2bcdasc4
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcdasc4
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_time
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTime
</UL>

<P><STRONG><a name="[29b]"></a>time_loop</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, main.o(i.time_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = time_loop &rArr; readTime &rArr; dsp_time &rArr; out_line_16 &rArr; out_text_16e
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTime
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAllRTC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDTog
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20a]"></a>type_pr_name</STRONG> (Thumb, 590 bytes, Stack size 8 bytes, dsp.o(i.type_pr_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = type_pr_name &rArr; out_line_24 &rArr; out_text_24e
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_24
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_change_PR
</UL>

<P><STRONG><a name="[29a]"></a>update_bmp</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, touch.o(i.update_bmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1652<LI>Call Chain = update_bmp &rArr; fnb_update &rArr; ExploreUSB &rArr; ReadFileFromUSB &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buzzer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_line_24
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg24
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnb_update
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_image_update
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b2]"></a>wait_tx2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart.o(i.wait_tx2))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_check
</UL>

<P><STRONG><a name="[1b7]"></a>wait_tx3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart.o(i.wait_tx3))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_result
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_strip
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_position
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_para
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_pform_read
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_meas_result
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_full_raw_data
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_clear
</UL>

<P><STRONG><a name="[1b8]"></a>wait_tx4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart.o(i.wait_tx4))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_clear
</UL>

<P><STRONG><a name="[1b9]"></a>wait_tx5</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart.o(i.wait_tx5))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result_store
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_clear
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_result
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_font
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_bmp
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_format
</UL>

<P><STRONG><a name="[2e0]"></a>write24</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eep.o(i.write24))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_oper_buff
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sysid
</UL>

<P><STRONG><a name="[1ec]"></a>write24w</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eep.o(i.write24w))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_id_chksum
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_vars
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_test_set
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_qc_set
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_unit
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_sysset
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_measure
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_serial
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_datetime
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_strip_no
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eep_all
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_id
</UL>

<P><STRONG><a name="[2f1]"></a>writeFR256</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, resm.o(i.writeFR256))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = writeFR256 &rArr; read_stat &rArr; sendFR &rArr; send_ck
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFR
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_stat
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_FR
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFR4k
</UL>

<P><STRONG><a name="[2e2]"></a>writeFR4k</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, resm.o(i.writeFR4k))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDInit
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFR256
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseFR
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sflash
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_seqno
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_reference_rgb
</UL>

<P><STRONG><a name="[26f]"></a>writeRTC</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, resm.o(i.writeRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = writeRTC &rArr; sendRTC &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendRTC
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1302
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAll_RTC
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTime
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRTC
</UL>

<P><STRONG><a name="[2de]"></a>write_bmp</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, flash.o(i.write_bmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = write_bmp &rArr; FMC_NAND_WriteSmallPage &rArr; FMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WriteSmallPage
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadSmallPage
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_EraseBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_font
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_bmp
</UL>

<P><STRONG><a name="[1ef]"></a>write_id_chksum</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, eep.o(i.write_id_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = write_id_chksum &rArr; store_sflash &rArr; write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write24w
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sflash
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read24
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_vars
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_measure
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence_serial
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_maintanence
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_strip_no
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eep_all
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_id
</UL>

<P><STRONG><a name="[26c]"></a>write_intflash</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, eep.o(i.write_intflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = write_intflash &rArr; prt_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Erase
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEEP
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_vars
</UL>

<P><STRONG><a name="[1f7]"></a>write_sflash</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, eep.o(i.write_sflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = write_sflash &rArr; writeFR4k &rArr; eraseFR &rArr; blankFR4K &rArr; readFR4k &rArr; PORT_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFR4k
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmpFR4k
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prt_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_record
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tch_mem_delete
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sflash
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_result
</UL>

<P><STRONG><a name="[1c7]"></a>write_vars</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, eep.o(i.write_vars))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_vars &rArr; write_intflash &rArr; prt_msg &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_intflash
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_vars
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_oper_buff
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_strip_no
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sysid
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_strip_info
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_position
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_para
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_pform_write
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[fa]"></a>SetSysClock</STRONG> (Thumb, 266 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a3]"></a>BSP_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_bsp.o(i.BSP_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>

<P><STRONG><a name="[a4]"></a>BSP_SetTime</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, usb_bsp.o(i.BSP_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>

<P><STRONG><a name="[167]"></a>USB_OTG_BSP_TimeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_TimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_BSP_TimeInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[16a]"></a>USB_OTG_CoreReset</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[170]"></a>USB_OTG_EnableCommonInt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EnableCommonInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
</UL>

<P><STRONG><a name="[150]"></a>USB_OTG_USBH_handle_Disconnect_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_Disconnect_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_Disconnect_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[151]"></a>USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[14e]"></a>USB_OTG_USBH_handle_hc_ISR</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHostAllChannels_intr
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[174]"></a>USB_OTG_USBH_handle_hc_n_In_ISR</STRONG> (Thumb, 1052 bytes, Stack size 40 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_n_In_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[175]"></a>USB_OTG_USBH_handle_hc_n_Out_ISR</STRONG> (Thumb, 952 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_n_Out_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_USBH_handle_hc_n_Out_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[14c]"></a>USB_OTG_USBH_handle_nptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_nptxfempty_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_USBH_handle_nptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[14f]"></a>USB_OTG_USBH_handle_port_ISR</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_port_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[14d]"></a>USB_OTG_USBH_handle_ptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_ptxfempty_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_USBH_handle_ptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[14b]"></a>USB_OTG_USBH_handle_rx_qlvl_ISR</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_rx_qlvl_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_OTG_USBH_handle_rx_qlvl_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[14a]"></a>USB_OTG_USBH_handle_sof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_sof_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_sof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[135]"></a>USBH_HandleEnum</STRONG> (Thumb, 478 bytes, Stack size 88 bytes, usbh_core.o(i.USBH_HandleEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USBH_HandleEnum &rArr; USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc &rArr; USBH_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[117]"></a>USBH_GetFreeChannel</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_GetFreeChannel))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>

<P><STRONG><a name="[127]"></a>USBH_Get_HID_Descriptor</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, usbh_hid_core.o(i.USBH_Get_HID_Descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_Get_HID_Descriptor &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[128]"></a>USBH_Get_HID_ReportDescriptor</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, usbh_hid_core.o(i.USBH_Get_HID_ReportDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_Get_HID_ReportDescriptor &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[2a]"></a>USBH_HID_ClassRequest</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, usbh_hid_core.o(i.USBH_HID_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBH_HID_ClassRequest &rArr; USBH_Get_HID_ReportDescriptor &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Set_Protocol
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Set_Idle
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseHIDDesc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_HID_ReportDescriptor
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_HID_Descriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_core.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>USBH_HID_Handle</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, usbh_hid_core.o(i.USBH_HID_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_HID_Handle &rArr; USBH_InterruptReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentFrame
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsEvenFrame
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptReceiveData
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_core.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>USBH_HID_InterfaceDeInit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usbh_hid_core.o(i.USBH_HID_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_HID_InterfaceDeInit &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_core.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>USBH_HID_InterfaceInit</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, usbh_hid_core.o(i.USBH_HID_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBH_HID_InterfaceInit &rArr; USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_core.o(.data)
</UL>
<P><STRONG><a name="[12b]"></a>USBH_ParseHIDDesc</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usbh_hid_core.o(i.USBH_ParseHIDDesc))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[12c]"></a>USBH_Set_Idle</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, usbh_hid_core.o(i.USBH_Set_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_Set_Idle &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[12d]"></a>USBH_Set_Protocol</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbh_hid_core.o(i.USBH_Set_Protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_Set_Protocol &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[2d]"></a>KEYBRD_Decode</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, usbh_hid_keybd.o(i.KEYBRD_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = KEYBRD_Decode &rArr; USR_KEYBRD_ProcessData &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_KEYBRD_ProcessData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_keybd.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>KEYBRD_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbh_hid_keybd.o(i.KEYBRD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = KEYBRD_Init &rArr; USR_KEYBRD_Init &rArr; printf5 &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_KEYBRD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_keybd.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>MOUSE_Decode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbh_hid_mouse.o(i.MOUSE_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MOUSE_Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_MOUSE_ProcessData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_mouse.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>MOUSE_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbh_hid_mouse.o(i.MOUSE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MOUSE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_MOUSE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_mouse.o(.data)
</UL>
<P><STRONG><a name="[11d]"></a>USBH_SubmitSetupRequest</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_ioreq.o(i.USBH_SubmitSetupRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_SubmitSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>

<P><STRONG><a name="[32]"></a>USBH_MSC_ClassRequest</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_msc_core.o(i.USBH_MSC_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MSC_ClassRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[13d]"></a>USBH_MSC_GETMaxLUN</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_msc_core.o(i.USBH_MSC_GETMaxLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_GETMaxLUN &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[33]"></a>USBH_MSC_Handle</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, usbh_msc_core.o(i.USBH_MSC_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = USBH_MSC_Handle &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_TestUnitReady
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RequestSense
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ReadCapacity10
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ModeSense6
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ErrorHandle
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GETMaxLUN
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>USBH_MSC_InterfaceDeInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbh_msc_core.o(i.USBH_MSC_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_InterfaceDeInit &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>USBH_MSC_InterfaceInit</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, usbh_msc_core.o(i.USBH_MSC_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBH_MSC_InterfaceInit &rArr; USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf5
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[126]"></a>USBH_ParseDevDesc</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_ParseDevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
</UL>

<P><STRONG><a name="[154]"></a>USBH_ParseEPDesc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_stdreq.o(i.USBH_ParseEPDesc))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[153]"></a>USBH_ParseInterfaceDesc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_stdreq.o(i.USBH_ParseInterfaceDesc))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[12a]"></a>USBH_ParseStringDesc</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, usbh_stdreq.o(i.USBH_ParseStringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
</UL>

<P><STRONG><a name="[19d]"></a>check_fs</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1e8]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1e3]"></a>create_chain</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1e6]"></a>create_name</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1f8]"></a>dir_alloc</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1fb]"></a>dir_find</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1fa]"></a>dir_next</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[1ff]"></a>dir_read</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[200]"></a>dir_register</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1f9]"></a>dir_sdi</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[252]"></a>find_volume</STRONG> (Thumb, 964 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[253]"></a>follow_path</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[258]"></a>get_fileinfo</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_fileinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[251]"></a>get_ldnumber</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[255]"></a>ld_clust</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1fc]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[201]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1e7]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[19e]"></a>move_window</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[257]"></a>remove_chain</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[256]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[259]"></a>sync_fs</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1fd]"></a>sync_window</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[250]"></a>validate</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[17b]"></a>_fp_digits</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[179]"></a>_printf_core</STRONG> (Thumb, 1762 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[17e]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17d]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[93]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
